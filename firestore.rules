rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isRole(role) {
      return request.auth != null && getUserData().role == role;
    }
    
    function isOneOfRoles(roles) {
      return request.auth != null && getUserData().role in roles;
    }

    // --- User Profiles ---
    match /users/{userId} {
      allow read: if request.auth.uid == userId || isRole('admin');
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId || isRole('admin');
    }

    // --- Campers Collection ---
    match /campers/{camperId} {
      allow read: if isOneOfRoles(['admin', 'staff']) || (isRole('parent') && resource.data.parentId == request.auth.uid);
      allow create: if isRole('parent') || isRole('admin');
      allow update: if isRole('admin') || (isRole('parent') && resource.data.parentId == request.auth.uid && request.resource.data.parentId == resource.data.parentId);
      allow delete: if isRole('admin');
    }
    
    // --- Roommate Requests ---
    match /roommateRequests/{requestId} {
        allow read: if isRole('admin') || request.auth.uid == resource.data.fromParentId || request.auth.uid == resource.data.toParentId;
        allow create: if isRole('parent');
        allow update: if isRole('admin') || (isRole('parent') && request.auth.uid == resource.data.toParentId);
    }

    // --- Admin-Only Collections ---
    match /sessions/{sessionId} {
      allow read: if request.auth != null;
      allow write: if isRole('admin');
    }
    match /cabins/{cabinId} {
      allow read: if request.auth != null;
      allow write: if isRole('admin');
    }
    match /registrationQuestions/{questionId} {
      allow read: if request.auth != null;
      allow write: if isRole('admin');
    }
    match /message_packages/{packageId} {
      allow read: if request.auth != null;
      allow write: if isRole('admin');
    }

    // --- Messages ---
    match /messages/{messageId} {
      allow read: if isOneOfRoles(['admin', 'staff']) || (isRole('parent') && resource.data.senderId == request.auth.uid);
      allow create: if isRole('parent') || isRole('admin');
    }
    
    // --- Camper Subcollections ---
    function isParentOfCamper(camperId) {
      return isRole('parent') && get(/databases/$(database)/documents/campers/$(camperId)).data.parentId == request.auth.uid;
    }

    match /campers/{camperId}/chartNotes/{noteId} {
      allow read: if isOneOfRoles(['admin', 'staff']) || isParentOfCamper(camperId);
      allow create: if isOneOfRoles(['admin', 'staff']);
    }
    match /campers/{camperId}/attachments/{attachmentId} {
      allow read: if isOneOfRoles(['admin', 'staff']) || isParentOfCamper(camperId);
      allow create: if isOneOfRoles(['admin', 'staff']);
    }
    match /campers/{camperId}/payments/{paymentId} {
      allow read: if isOneOfRoles(['admin', 'staff']) || isParentOfCamper(camperId);
      allow create: if isOneOfRoles(['admin', 'staff']);
    }
    match /campers/{camperId}/timeline/{timelineId} {
      allow read: if isOneOfRoles(['admin', 'staff']) || isParentOfCamper(camperId);
      allow create: if isOneOfRoles(['admin', 'staff']);
    }
    
    // --- Applications ---
    match /applications/{appId} {
        allow read, write: if isRole('admin');
        allow create: if request.auth != null;
    }
  }
}
