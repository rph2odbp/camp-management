{"version":3,"file":"Giftcard.js","sources":["../../../../src/components/Giftcard/Giftcard.tsx"],"sourcesContent":["import { h } from 'preact';\nimport UIElement from '../internal/UIElement/UIElement';\nimport GiftcardComponent from './components/GiftcardComponent';\nimport { CoreProvider } from '../../core/Context/CoreProvider';\nimport PayButton from '../internal/PayButton';\nimport AdyenCheckoutError from '../../core/Errors/AdyenCheckoutError';\nimport { PaymentAmount } from '../../types/global-types';\nimport { GiftCardElementData, GiftCardConfiguration, balanceCheckResponseType } from './types';\nimport { TxVariants } from '../tx-variants';\nimport SRPanelProvider from '../../core/Errors/SRPanelProvider';\n\nexport class GiftcardElement extends UIElement<GiftCardConfiguration> {\n    public static type = TxVariants.giftcard;\n\n    protected static defaultProps = {\n        brandsConfiguration: {}\n    };\n\n    formatProps(props) {\n        return {\n            ...props?.configuration,\n            ...props\n        };\n    }\n\n    formatData(): GiftCardElementData {\n        return {\n            paymentMethod: {\n                type: this.constructor['type'],\n                brand: this.props.brand,\n                encryptedCardNumber: this.state.data?.encryptedCardNumber,\n                encryptedSecurityCode: this.state.data?.encryptedSecurityCode\n            }\n        };\n    }\n\n    get isValid() {\n        return !!this.state.isValid;\n    }\n\n    get icon() {\n        return this.props.brandsConfiguration[this.props.brand]?.icon || this.props.icon || this.resources.getImage()(this.props.brand);\n    }\n\n    get displayName() {\n        return this.props.brandsConfiguration[this.props.brand]?.name || this.props.name;\n    }\n\n    private handleBalanceCheck = (data: GiftCardElementData): Promise<balanceCheckResponseType> => {\n        if (this.props.onBalanceCheck) {\n            return new Promise((resolve, reject) => {\n                void this.props.onBalanceCheck(resolve, reject, data);\n            });\n        }\n\n        if (this.props.session) {\n            return this.props.session.checkBalance(data);\n        }\n    };\n\n    private onOrderRequest = data => {\n        if (this.props.onOrderRequest)\n            return new Promise((resolve, reject) => {\n                void this.props.onOrderRequest(resolve, reject, data);\n            });\n        if (this.props.session) {\n            return this.props.session.createOrder();\n        }\n    };\n\n    public balanceCheck() {\n        return this.onBalanceCheck();\n    }\n\n    private onBalanceCheck = (): void => {\n        if (!this.isValid) {\n            this.showValidation();\n            return;\n        }\n\n        // skip balance check if no onBalanceCheck event has been defined\n        const hasBalanceCheck = this.props.session || this.props.onBalanceCheck;\n        if (!hasBalanceCheck) return super.submit();\n\n        this.setStatus('loading');\n\n        this.handleBalanceCheck(this.formatData())\n            .then(({ balance, transactionLimit = {} as PaymentAmount }) => {\n                if (!balance) throw new Error('card-error'); // card doesn't exist\n                if (balance?.currency !== this.props.amount?.currency) throw new Error('currency-error');\n                if (balance?.value <= 0) throw new Error('no-balance');\n\n                if (this.props.amount.value > balance.value || this.props.amount.value > transactionLimit.value) {\n                    if (this.props.order) {\n                        return this.makeSubmitCall();\n                    }\n\n                    return this.onOrderRequest(this.data).then((order: { orderData: string; pspReference: string }) => {\n                        this.setState({ order: { orderData: order.orderData, pspReference: order.pspReference } });\n                        return this.makeSubmitCall();\n                    });\n                } else {\n                    return this.handleOnRequiringConfirmation(balance, transactionLimit);\n                }\n            })\n            .catch(error => {\n                this.setStatus(error?.message || 'error');\n                if (this.props.onError) {\n                    if (error instanceof AdyenCheckoutError) {\n                        this.handleError(error);\n                    } else {\n                        this.handleError(new AdyenCheckoutError('ERROR', error));\n                    }\n                }\n            });\n    };\n\n    /**\n     * Check if it should call onRequiringConfirmation\n     */\n    private handleOnRequiringConfirmation = (balance, transactionLimit): Promise<any> => {\n        this.componentRef.setBalance({ balance, transactionLimit });\n        this.setStatus('ready');\n\n        // 1. if we show pay button we don't need to ask for confirmation\n        if (this.props.showPayButton) {\n            return;\n        }\n        // 2. there's no callback, we throw error\n        if (!this.props.onRequiringConfirmation) {\n            throw new AdyenCheckoutError('IMPLEMENTATION_ERROR', 'onRequiringConfirmation must be provided');\n        }\n        // 3. success case if in case of custom pay button\n        return (\n            new Promise<void>((resolve, reject) => {\n                void this.props.onRequiringConfirmation(resolve, reject);\n            })\n                //when this resolve passed to onRequiringConfirmation gets resolved make payments call\n                .then(() => this.makeSubmitCall())\n                //when it gets rejected handle cancellation\n                .catch(() => {})\n        );\n    };\n\n    public submit() {\n        // for simplicity of the merchant we always only expose .submit()\n        // however to make the actual payment call we call makeSubmitCall\n        this.balanceCheck();\n    }\n\n    // this makes the payment, as .submit is used by the merchant to trigger the payButton action\n    private makeSubmitCall() {\n        super.submit();\n    }\n\n    // Giftcards override the regular payButton flow\n    public payButton = props => {\n        return <PayButton {...props} />;\n    };\n\n    render() {\n        return (\n            <CoreProvider i18n={this.props.i18n} loadingContext={this.props.loadingContext} resources={this.resources}>\n                <SRPanelProvider srPanel={this.props.modules.srPanel}>\n                    <GiftcardComponent\n                        ref={ref => {\n                            this.componentRef = ref;\n                        }}\n                        {...this.props}\n                        handleKeyPress={this.handleKeyPress}\n                        showPayButton={this.props.showPayButton}\n                        onChange={this.setState}\n                        makeBalanceCheck={() => this.onBalanceCheck()}\n                        makePayment={() => this.makeSubmitCall()}\n                        payButton={this.payButton}\n                    />\n                </SRPanelProvider>\n            </CoreProvider>\n        );\n    }\n}\n\nexport default GiftcardElement;\n"],"names":["GiftcardElement","UIElement","formatProps","props","_object_spread","configuration","formatData","_this_state_data","_this_state_data1","paymentMethod","type","this","constructor","brand","encryptedCardNumber","state","data","encryptedSecurityCode","isValid","icon","_this_props_brandsConfiguration_this_props_brand","brandsConfiguration","resources","getImage","displayName","name","balanceCheck","onBalanceCheck","submit","makeSubmitCall","super","render","h","CoreProvider","i18n","loadingContext","SRPanelProvider","srPanel","modules","GiftcardComponent","ref","componentRef","handleKeyPress","showPayButton","onChange","setState","makeBalanceCheck","makePayment","payButton","args","_define_property","handleBalanceCheck","Promise","resolve","reject","session","checkBalance","onOrderRequest","createOrder","showValidation","setStatus","then","balance","transactionLimit","_this_props_amount","Error","currency","amount","value","order","orderData","pspReference","handleOnRequiringConfirmation","catch","error","message","onError","AdyenCheckoutError","handleError","setBalance","onRequiringConfirmation","PayButton","TxVariants","giftcard","defaultProps"],"mappings":"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"}