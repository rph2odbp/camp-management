{"version":3,"file":"useSRPanelForGiftcardErrors.js","sources":["../../../../../src/components/Giftcard/components/useSRPanelForGiftcardErrors.ts"],"sourcesContent":["import { useEffect, useState } from 'preact/hooks';\nimport { SetSRMessagesReturnObject } from '../../../core/Errors/types';\nimport useSRPanelContext from '../../../core/Errors/useSRPanelContext';\nimport { usePrevious } from '../../../utils/hookUtils';\nimport { ERROR_ACTION_BLUR_SCENARIO, ERROR_ACTION_FOCUS_FIELD } from '../../../core/Errors/constants';\nimport { getArrayDifferences } from '../../../utils/arrayUtils';\nimport { SetSRMessagesReturnFn } from '../../../core/Errors/SRPanelProvider';\nimport SecuredFieldsProvider from '../../internal/SecuredFields/SFP/SecuredFieldsProvider';\n\n/**\n * Interface for transformed error objects returned from mapErrorsToValidationRuleResult\n */\ninterface TransformedError {\n    isValid: boolean;\n    errorMessage: string;\n    errorI18n: string;\n    error: string;\n    rootNode: HTMLElement;\n}\n\n/**\n * Interface for errors object with transformed error entries\n */\ninterface TransformedErrorsObj {\n    [key: string]: TransformedError | null;\n}\n\n/**\n * Props interface for the error handling hook\n */\ninterface UseSRPanelForGiftcardErrorsProps {\n    errors: TransformedErrorsObj;\n    isValidating: boolean;\n    sfp: SecuredFieldsProvider;\n}\n\n/**\n * Interface for sorted error objects used for comparison\n */\ninterface SortedErrorObject {\n    field: string;\n    errorMessage: string;\n}\n\n/**\n * Custom hook for handling gift card component errors and screen reader announcements\n *\n * This hook manages both visual and screen reader error announcements for the gift card component,\n * handling both blur-based validation errors and form-wide validation errors.\n */\nconst useSRPanelForGiftcardErrors = ({ errors, isValidating, sfp }: UseSRPanelForGiftcardErrorsProps) => {\n    // Track sorted list of errors for comparison with previous state\n    const [sortedErrorList, setSortedErrorList] = useState<SortedErrorObject[]>(null);\n    // Track previous error list for detecting changes\n    const previousSortedErrors = usePrevious(sortedErrorList);\n\n    // Get SRPanel context for managing screen reader messages\n    const { setSRMessagesFromObjects, setSRMessagesFromStrings, clearSRPanel, shouldMoveFocusSR } = useSRPanelContext();\n\n    // Fixed layout array defining the order of fields for error sorting\n    // Assume fields in this order, and adds encryptedExpiryDate for MealVoucher, this is ignored in giftcard\n    const layout = ['encryptedCardNumber', 'encryptedExpiryDate', 'encryptedSecurityCode'];\n\n    useEffect(() => {\n        try {\n            // Create a partial function for setting SR messages with fixed configuration\n            const setMessages: SetSRMessagesReturnFn = setSRMessagesFromObjects?.({});\n            // Set messages with current errors and layout\n\n            // Unlike Card SR Panel, isValidating is a boolean\n            const srPanelResp: SetSRMessagesReturnObject = setMessages?.({\n                errors,\n                isValidating,\n                layout\n            });\n\n            // Store the sorted list of errors for comparison\n            const currentErrorsSortedByLayout = srPanelResp?.currentErrorsSortedByLayout;\n            setSortedErrorList(currentErrorsSortedByLayout);\n\n            // Handle different error scenarios based on the action type\n            switch (srPanelResp?.action) {\n                case ERROR_ACTION_FOCUS_FIELD:\n                    // When a field needs to be focused due to validation error\n                    if (shouldMoveFocusSR) {\n                        sfp?.setFocusOn(srPanelResp?.fieldToFocus);\n                    }\n                    // Remove 'showValidation' mode - allowing time for collation of all the fields in error whilst it is 'showValidation' mode (some errors come in a second render pass)\n                    setTimeout(() => {\n                        if (typeof isValidating === 'boolean') {\n                            isValidating = false;\n                        }\n                    }, 300);\n                    break;\n\n                case ERROR_ACTION_BLUR_SCENARIO: {\n                    // Handle blur-based validation errors\n                    const difference = getArrayDifferences(currentErrorsSortedByLayout, previousSortedErrors, 'field');\n                    const latestErrorMsg = difference?.[0];\n\n                    if (latestErrorMsg) {\n                        // Only announce blur-based errors to screen reader\n                        const isBlurBasedError = true;\n                        const latestSRError = isBlurBasedError ? latestErrorMsg.errorMessage : null;\n                        setSRMessagesFromStrings(latestSRError);\n                    } else {\n                        // Clear SR panel if there are no more errors\n                        clearSRPanel();\n                    }\n                    break;\n                }\n            }\n        } catch (_) {\n            // Fail silently - we don't want to break the component if SRPanel fails\n        }\n    }, [errors]);\n};\n\n// Export all interfaces and the hook\nexport type { TransformedError, TransformedErrorsObj };\n\nexport { useSRPanelForGiftcardErrors };\n"],"names":["useSRPanelForGiftcardErrors","errors","isValidating","sfp","sortedErrorList","setSortedErrorList","useState","previousSortedErrors","usePrevious","setSRMessagesFromObjects","setSRMessagesFromStrings","clearSRPanel","shouldMoveFocusSR","useSRPanelContext","layout","useEffect","setMessages","srPanelResp","currentErrorsSortedByLayout","action","ERROR_ACTION_FOCUS_FIELD","setFocusOn","fieldToFocus","setTimeout","ERROR_ACTION_BLUR_SCENARIO","difference","getArrayDifferences","latestErrorMsg","latestSRError","errorMessage","_"],"mappings":"0XAkDA,MAAMA,EAA8B,EAAGC,SAAQC,eAAcC,UAEzD,MAAOC,EAAiBC,GAAsBC,EAA8B,MAEtEC,EAAuBC,EAAYJ,IAGnCK,yBAAEA,EAAwBC,yBAAEA,EAAwBC,aAAEA,EAAYC,kBAAEA,GAAsBC,IAI1FC,EAAS,CAAC,sBAAuB,sBAAuB,yBAE9DC,EAAU,KACN,IAEI,MAAMC,EAAqCP,aAAAA,EAAAA,EAA2B,IAIhEQ,EAAyCD,aAAAA,EAAAA,EAAc,CACzDf,SACAC,eACAY,WAIEI,EAA8BD,aAAAA,EAAAA,EAAaC,4BAIjD,OAHAb,EAAmBa,GAGXD,aAAAA,EAAAA,EAAaE,QACjB,KAAKC,EAEGR,IACAT,SAAAA,EAAKkB,WAAWJ,aAAAA,EAAAA,EAAaK,eAGjCC,WAAW,KACqB,kBAAjBrB,IACPA,GAAe,IAEpB,KACH,MAEJ,KAAKsB,EAA4B,CAE7B,MAAMC,EAAaC,EAAoBR,EAA6BX,EAAsB,SACpFoB,EAAiBF,aAAAA,EAAAA,EAAa,GAEpC,GAAIE,EAAgB,CAEhB,MACMC,GADmB,EACgBD,EAAeE,aAAe,KACvEnB,EAAyBkB,EAC7B,MAEIjB,IAEJ,KACJ,EAER,CAAE,MAAOmB,GAET,GACD,CAAC7B"}