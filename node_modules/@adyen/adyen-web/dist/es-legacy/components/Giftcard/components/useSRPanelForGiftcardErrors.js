import{useState as o,useEffect as s}from"../../../external/preact/hooks/dist/hooks.js";import e from"../../../core/Errors/useSRPanelContext.js";import{usePrevious as r}from"../../../utils/hookUtils.js";import{ERROR_ACTION_BLUR_SCENARIO as t,ERROR_ACTION_FOCUS_FIELD as l}from"../../../core/Errors/constants.js";import{getArrayDifferences as i}from"../../../utils/arrayUtils.js";const n=({errors:n,isValidating:a,sfp:c})=>{const[u,d]=o(null),m=r(u),{setSRMessagesFromObjects:p,setSRMessagesFromStrings:f,clearSRPanel:y,shouldMoveFocusSR:S}=e(),v=["encryptedCardNumber","encryptedExpiryDate","encryptedSecurityCode"];s(()=>{try{const o=null==p?void 0:p({}),s=null==o?void 0:o({errors:n,isValidating:a,layout:v}),e=null==s?void 0:s.currentErrorsSortedByLayout;switch(d(e),null==s?void 0:s.action){case l:S&&(null==c||c.setFocusOn(null==s?void 0:s.fieldToFocus)),setTimeout(()=>{"boolean"==typeof a&&(a=!1)},300);break;case t:{const o=i(e,m,"field"),s=null==o?void 0:o[0];if(s){const o=!0?s.errorMessage:null;f(o)}else y();break}}}catch(o){}},[n])};export{n as useSRPanelForGiftcardErrors};
//# sourceMappingURL=useSRPanelForGiftcardErrors.js.map
