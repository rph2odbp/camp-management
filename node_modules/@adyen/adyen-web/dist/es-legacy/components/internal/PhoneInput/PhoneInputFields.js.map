{"version":3,"file":"PhoneInputFields.js","sources":["../../../../../src/components/internal/PhoneInput/PhoneInputFields.tsx"],"sourcesContent":["import { Fragment, h } from 'preact';\nimport { useEffect } from 'preact/hooks';\nimport Field from '../FormFields/Field';\nimport { useCoreContext } from '../../../core/Context/CoreProvider';\nimport './PhoneInput.scss';\nimport Select from '../FormFields/Select';\nimport { PhoneInputSchema } from './types';\nimport InputText from '../FormFields/InputText';\nimport { DataSet } from '../../../core/Services/data-set';\nimport { Form } from '../../../utils/useForm/types';\n\nexport interface PhoneInputFieldProps {\n    items: DataSet;\n    requiredFields?: string[];\n    data: PhoneInputSchema;\n    onChange: (obj) => void;\n    form: Form<PhoneInputSchema>;\n    getError: (string) => string | boolean;\n    phoneNumberKey?: string;\n    phonePrefixErrorKey?: string;\n    phoneNumberErrorKey?: string;\n    placeholders?: PhoneInputSchema;\n    ref?;\n    showPrefix?: boolean;\n    showNumber?: boolean;\n    canSelectPrefix?: boolean;\n}\n/**\n *\n * @param PhoneInputFormProps\n * @constructor\n */\nexport default function PhoneInputFields({ getError, showNumber, showPrefix, form, canSelectPrefix = true, ...props }: PhoneInputFieldProps) {\n    const { i18n } = useCoreContext();\n\n    const { handleChangeFor, data, valid } = form;\n\n    // Force re-validation of the phoneNumber when data.phonePrefix changes (since the validation rules will also change)\n    useEffect((): void => {\n        if (data.phoneNumber) {\n            handleChangeFor('phoneNumber', 'blur')(data.phoneNumber);\n        }\n    }, [data.phonePrefix]);\n\n    return (\n        <Fragment>\n            {showPrefix && (\n                <Field\n                    className={'adyen-checkout-field--phone-prefix'}\n                    label={i18n.get('telephonePrefix')}\n                    errorMessage={getError('phonePrefix')}\n                    showValidIcon={false}\n                    isValid={valid.phonePrefix}\n                    dir={'ltr'}\n                    i18n={i18n}\n                    name={'phonePrefix'}\n                >\n                    <Select\n                        readonly={!canSelectPrefix}\n                        className={'adyen-checkout-dropdown adyen-checkout-dropdown--countrycode-selector'}\n                        name={'phonePrefix'}\n                        items={props.items}\n                        onChange={handleChangeFor('phonePrefix')}\n                        placeholder={props?.placeholders?.phonePrefix}\n                        selectedValue={data.phonePrefix}\n                    />\n                </Field>\n            )}\n\n            {showNumber && (\n                <Field\n                    className={'adyen-checkout-field--phone-number'}\n                    label={props.phoneNumberKey ? i18n.get(props.phoneNumberKey) : i18n.get('telephoneNumber')}\n                    errorMessage={getError('phoneNumber')}\n                    isValid={valid.phoneNumber}\n                    filled={data?.phoneNumber?.length > 0}\n                    dir={'ltr'}\n                    i18n={i18n}\n                    name={'phoneNumber'}\n                >\n                    <InputText\n                        className=\"adyen-checkout__input adyen-checkout-input adyen-checkout-input--phone-number\"\n                        type=\"tel\"\n                        name=\"phoneNumber\"\n                        value={data.phoneNumber}\n                        onInput={handleChangeFor('phoneNumber', 'input')}\n                        onBlur={handleChangeFor('phoneNumber', 'blur')}\n                        placeholder={props?.placeholders?.phoneNumber}\n                        autoCorrect=\"off\"\n                        required={true}\n                    />\n                </Field>\n            )}\n        </Fragment>\n    );\n}\n"],"names":["PhoneInputFields","_param","props","data","getError","showNumber","showPrefix","form","canSelectPrefix","i18n","useCoreContext","handleChangeFor","valid","useEffect","phoneNumber","phonePrefix","h","Fragment","Field","className","label","get","errorMessage","showValidIcon","isValid","dir","name","Select","readonly","items","onChange","placeholder","placeholders","selectedValue","phoneNumberKey","filled","length","InputText","type","value","onInput","onBlur","autoCorrect","required"],"mappings":"8tBAgCe,SAASA,EAAiBC,GAAA,IA+BJC,EAYTC,EAYSD,GAvDIE,SAAEA,EAAQC,WAAEA,EAAUC,WAAEA,EAAUC,KAAEA,EAAIC,gBAAEA,GAAkB,GAA5DP,EAAqEC,EAAAA,EAArED,EAAA,CAAEG,WAAUC,aAAYC,aAAYC,OAAMC,oBAC/E,MAAMC,KAAEA,GAASC,KAEXC,gBAAEA,EAAeR,KAAEA,EAAIS,MAAEA,GAAUL,EASzC,OANAM,EAAU,KACFV,EAAKW,aACLH,EAAgB,cAAe,OAA/BA,CAAuCR,EAAKW,cAEjD,CAACX,EAAKY,cAGLC,EAACC,EAAAA,KACIX,GACGU,EAACE,EAAAA,CACGC,UAAW,qCACXC,MAAOX,EAAKY,IAAI,mBAChBC,aAAclB,EAAS,eACvBmB,eAAe,EACfC,QAASZ,EAAMG,YACfU,IAAK,MACLhB,KAAMA,EACNiB,KAAM,eAENV,EAACW,EAAAA,CACGC,UAAWpB,EACXW,UAAW,wEACXO,KAAM,cACNG,MAAO3B,EAAM2B,MACbC,SAAUnB,EAAgB,eAC1BoB,YAAa7B,SAAmB,QAAnBA,EAAAA,EAAO8B,oBAAP9B,IAAAA,OAAAA,EAAAA,EAAqBa,YAClCkB,cAAe9B,EAAKY,eAK/BV,GACGW,EAACE,EAAAA,CACGC,UAAW,qCACXC,MAAOlB,EAAMgC,eAAiBzB,EAAKY,IAAInB,EAAMgC,gBAAkBzB,EAAKY,IAAI,mBACxEC,aAAclB,EAAS,eACvBoB,QAASZ,EAAME,YACfqB,QAAQhC,SAAiB,QAAjBA,EAAAA,EAAMW,mBAANX,IAAAA,OAAAA,EAAAA,EAAmBiC,QAAS,EACpCX,IAAK,MACLhB,KAAMA,EACNiB,KAAM,eAENV,EAACqB,EAAAA,CACGlB,UAAU,gFACVmB,KAAK,MACLZ,KAAK,cACLa,MAAOpC,EAAKW,YACZ0B,QAAS7B,EAAgB,cAAe,SACxC8B,OAAQ9B,EAAgB,cAAe,QACvCoB,YAAa7B,SAAmB,QAAnBA,EAAAA,EAAO8B,oBAAP9B,IAAAA,OAAAA,EAAAA,EAAqBY,YAClC4B,YAAY,MACZC,UAAU,KAMlC"}