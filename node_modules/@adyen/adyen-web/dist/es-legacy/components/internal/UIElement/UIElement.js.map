{"version":3,"file":"UIElement.js","sources":["../../../../../src/components/internal/UIElement/UIElement.tsx"],"sourcesContent":["import { h } from 'preact';\nimport BaseElement from '../BaseElement/BaseElement';\nimport PayButton from '../PayButton';\nimport { assertIsDropin, cleanupFinalResult, getRegulatoryDefaults, sanitizeResponse, verifyPaymentDidNotFail } from './utils';\nimport AdyenCheckoutError, { NETWORK_ERROR } from '../../../core/Errors/AdyenCheckoutError';\nimport { hasOwnProperty } from '../../../utils/hasOwnProperty';\nimport { Resources } from '../../../core/Context/Resources';\nimport { ANALYTICS_ERROR_TYPE, ANALYTICS_SUBMIT_STR } from '../../../core/Analytics/constants';\n\nimport { AnalyticsInitialEvent } from '../../../core/Analytics/types';\nimport type { CoreConfiguration, ICore, AdditionalDetailsData } from '../../../core/types';\nimport type { ComponentMethodsRef, PayButtonFunctionProps, UIElementProps, UIElementStatus } from './types';\nimport type { CheckoutSessionDetailsResponse, CheckoutSessionPaymentResponse } from '../../../core/CheckoutSession/types';\nimport type {\n    ActionHandledReturnObject,\n    CheckoutAdvancedFlowResponse,\n    Order,\n    PaymentAction,\n    PaymentAmount,\n    PaymentData,\n    PaymentMethod,\n    PaymentMethodsResponse,\n    PaymentResponseData\n} from '../../../types/global-types';\nimport type { IDropin } from '../../Dropin/types';\nimport type { NewableComponent } from '../../../core/core.registry';\nimport CancelError from '../../../core/Errors/CancelError';\n\nimport './UIElement.scss';\nimport { AnalyticsEvent } from '../../../core/Analytics/AnalyticsEvent';\nimport { AnalyticsLogEvent } from '../../../core/Analytics/AnalyticsLogEvent';\nimport { AnalyticsErrorEvent } from '../../../core/Analytics/AnalyticsErrorEvent';\n\nexport abstract class UIElement<P extends UIElementProps = UIElementProps> extends BaseElement<P> {\n    protected componentRef: any;\n\n    protected resources: Resources;\n\n    public elementRef: UIElement;\n\n    public static type = undefined;\n\n    /**\n     * Defines all txVariants that the Component supports (in case it support multiple ones besides the 'type' one)\n     */\n    public static txVariants: string[] = [];\n\n    constructor(checkout: ICore, props?: P) {\n        super(checkout, props);\n\n        this.core.register(this.constructor as NewableComponent);\n\n        this.submit = this.submit.bind(this);\n        this.setState = this.setState.bind(this);\n        this.onComplete = this.onComplete.bind(this);\n        this.handleAction = this.handleAction.bind(this);\n        this.handleOrder = this.handleOrder.bind(this);\n        this.handleAdditionalDetails = this.handleAdditionalDetails.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.setElementStatus = this.setElementStatus.bind(this);\n        this.submitAnalytics = this.submitAnalytics.bind(this);\n        this.makePaymentsCall = this.makePaymentsCall.bind(this);\n        this.makeAdditionalDetailsCall = this.makeAdditionalDetailsCall.bind(this);\n        this.submitUsingSessionsFlow = this.submitUsingSessionsFlow.bind(this);\n\n        this.elementRef = (props && props.elementRef) || this;\n        this.resources = this.props.modules ? this.props.modules.resources : undefined;\n\n        this.storeElementRefOnCore(this.props);\n\n        this.onEnterKeyPressed = this.onEnterKeyPressed.bind(this);\n        this.onActionHandled = this.onActionHandled.bind(this);\n    }\n\n    protected override buildElementProps(componentProps?: P) {\n        const globalCoreProps = this.core.getCorePropsForComponent();\n        const isStoredPaymentMethod = !!componentProps?.isStoredPaymentMethod;\n\n        const paymentMethodFromResponse = isStoredPaymentMethod ? {} : this.getPaymentMethodFromPaymentMethodsResponse(componentProps?.type);\n\n        const finalProps = {\n            showPayButton: true,\n            ...globalCoreProps,\n            ...paymentMethodFromResponse,\n            ...componentProps\n        };\n\n        const isDropin = assertIsDropin(this as unknown as IDropin);\n\n        this.props = this.formatProps({\n            ...this.constructor['defaultProps'], // component defaults\n            ...getRegulatoryDefaults(this.core.options.countryCode, isDropin), // regulatory defaults\n            ...finalProps // the rest (inc. merchant defined config)\n        });\n    }\n\n    /**\n     *  Get the payment method from the paymentMethodsResponse\n     *\n     * @param type - The type of the payment method to get. (This prop is passed by Drop-in OR Standalone components containing the property 'type' as part of their configuration)\n     */\n    protected getPaymentMethodFromPaymentMethodsResponse(type?: string): PaymentMethod {\n        return this.core.paymentMethodsResponse?.find(type || this.constructor['type']);\n    }\n\n    protected storeElementRefOnCore(props?: P) {\n        if (!props?.isDropin) {\n            this.core.storeElementReference(this);\n        }\n    }\n\n    public isAvailable(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    public setState(newState: object): void {\n        this.state = { ...this.state, ...newState };\n        this.onChange();\n    }\n\n    public showValidation(): this {\n        if (this.componentRef && this.componentRef.showValidation) this.componentRef.showValidation();\n        return this;\n    }\n\n    /**\n     * elementRef is a ref to the subclass that extends UIElement e.g. Card.tsx\n     */\n    public setElementStatus(status: UIElementStatus, props?: any): this {\n        this.elementRef?.setStatus(status, props);\n        return this;\n    }\n\n    /**\n     * componentRef is a ref to the primary component inside that subclass e.g. CardInput.tsx\n     */\n    public setStatus(status: UIElementStatus, props?): this {\n        if (this.componentRef?.setStatus) {\n            this.componentRef.setStatus(status, props);\n        }\n        return this;\n    }\n\n    protected onChange(): void {\n        this.props.onChange?.(\n            {\n                data: this.data,\n                isValid: this.isValid,\n                errors: this.state.errors,\n                valid: this.state.valid\n            },\n            this.elementRef\n        );\n    }\n\n    // Only called once, for UIElements (including Dropin), as they are being mounted\n    protected setUpAnalytics(setUpAnalyticsObj: AnalyticsInitialEvent) {\n        const sessionId = this.props.session?.id;\n\n        return this.props.modules.analytics.setUp({\n            ...setUpAnalyticsObj,\n            ...(sessionId && { sessionId })\n        });\n    }\n\n    /**\n     * A function for all UIElements, or BaseElement, to use to create an analytics action for when it's been:\n     *  - mounted,\n     *  - a PM has been selected\n     *  - onSubmit has been called (as a result of the pay button being pressed)\n     *\n     *  In some other cases e.g. 3DS2 components, this function is overridden to allow more specific analytics actions to be created\n     */\n\n    protected submitAnalytics(analyticsObj: AnalyticsEvent) {\n        try {\n            analyticsObj.component = this.getComponent(analyticsObj);\n\n            this.props.modules.analytics.sendAnalytics(analyticsObj);\n        } catch (error) {\n            console.warn('Failed to submit the analytics event. Error:', error);\n        }\n    }\n\n    /** Work out what the component's \"type\" is:\n     * - first check for a dedicated \"analyticsType\" (currently only applies to custom-cards)\n     * - otherwise, distinguish cards from non-cards: cards will use their static type property, everything else will use props.type\n     */\n    private getComponent({ component }: AnalyticsEvent): string {\n        if (component) {\n            return component;\n        }\n        if (this.constructor['analyticsType']) {\n            return this.constructor['analyticsType'];\n        }\n        if (this.constructor['type'] === 'scheme' || this.constructor['type'] === 'bcmc') {\n            return this.constructor['type'];\n        }\n        return this.type;\n    }\n\n    public submit(): void {\n        if (!this.isValid) {\n            this.showValidation();\n            return;\n        }\n\n        this.makePaymentsCall()\n            .then(sanitizeResponse)\n            .then(verifyPaymentDidNotFail)\n            .then(this.handleResponse)\n            .catch((e: PaymentResponseData | Error) => {\n                if (e instanceof CancelError) {\n                    this.setElementStatus('ready');\n                    return;\n                }\n                this.handleFailedResult(e as PaymentResponseData);\n            });\n    }\n\n    protected makePaymentsCall(): Promise<CheckoutAdvancedFlowResponse | CheckoutSessionPaymentResponse> {\n        this.setElementStatus('loading');\n\n        if (this.props.onSubmit) {\n            return this.submitUsingAdvancedFlow();\n        }\n\n        if (this.core.session) {\n            const beforeSubmitEvent: Promise<PaymentData> = this.props.beforeSubmit\n                ? new Promise((resolve, reject) =>\n                      this.props.beforeSubmit(this.data, this.elementRef, {\n                          resolve,\n                          reject: () => reject(new CancelError('beforeSubmitRejected'))\n                      })\n                  )\n                : Promise.resolve(this.data);\n\n            return beforeSubmitEvent.then(this.submitUsingSessionsFlow);\n        }\n\n        this.handleError(\n            new AdyenCheckoutError(\n                'IMPLEMENTATION_ERROR',\n                'It can not perform /payments call. Callback \"onSubmit\" is missing or Checkout session is not available'\n            )\n        );\n    }\n\n    private async submitUsingAdvancedFlow(): Promise<CheckoutAdvancedFlowResponse> {\n        return new Promise<CheckoutAdvancedFlowResponse>((resolve, reject) => {\n            // Call analytics endpoint\n            const event = new AnalyticsLogEvent({\n                type: ANALYTICS_SUBMIT_STR,\n                message: 'Shopper clicked pay'\n            });\n            this.submitAnalytics(event);\n\n            this.props.onSubmit(\n                {\n                    data: this.data,\n                    isValid: this.isValid\n                },\n                this.elementRef,\n                { resolve, reject }\n            );\n        });\n    }\n\n    private async submitUsingSessionsFlow(data: PaymentData): Promise<CheckoutSessionPaymentResponse> {\n        const event = new AnalyticsLogEvent({\n            type: ANALYTICS_SUBMIT_STR,\n            message: 'Shopper clicked pay'\n        });\n        this.submitAnalytics(event);\n\n        try {\n            return await this.core.session.submitPayment(data);\n        } catch (error: unknown) {\n            if (error instanceof AdyenCheckoutError) {\n                this.handleError(error);\n            } else {\n                this.handleError(new AdyenCheckoutError('ERROR', 'Error when making /payments call', { cause: error }));\n            }\n\n            return Promise.reject(error);\n        }\n\n        // // Uncomment to simulate failed\n        // return {\n        //     resultCode: 'Refused',\n        //     sessionData:\n        //         'Ab02b4c0!BQABAgBKGgqfEz8uQlU4yCIOWjA8bkEwmbJ7Qt4r+x5IPXREu1rMjwNk5MDoHFNlv+MWvinS6nXIDniXgRzXCdSC4ksw9CNDBAjOa+B88wRoj/rLTieuWh/0leR88qkV24vtIkjsIsbJTDB78Pd8wX8MEDsXhaAdEIyX9E8eqxuQ3bwPbvLs1Dlgo1ZrfkQRzaNiuVM8ejRG0IWE1bGThJzY+sJvZZHvlDMXIlxhZcDoQvsMj/WwE6+nFJxBiC3oRzmvVn3AbkLQGtvwq16UUSfYbPzG9dXypJMtcrZAQYq2g/2+BSibCcmee9AXq/wij11BERrYmjbDt5NkkdUnDVgAB7pdqbnWX0A2sxBKeYtLSP2kxp+5LoU/Wty3fmcVA3VKVkHfgmIihkeL8lY++5hvHjnkzOE4tyx/sheiKS4zqoWE43TD6n8mpFskAzwMHq4G2o6vkXqvaKFEq7y/R2fVrCypenmRhkPASizpM265rKLU+L4E/C+LMHfN0LYKRMCrLr0gI2GAp+1PZLHgh0tCtiJC/zcJJtJs6sHNQxLUN+kxJuELUHOcuL3ivjG+mWteUnBENZu7KqOSZYetiWYRiyLOXDiBHqbxuQwTuO54L15VLkS/mYB20etibM1nn+fRmbo+1IJkCSalhwi5D7fSrpjbQTmAsOpJT1N8lC1MSNmAvAwG1kWL4JxYwXDKYyYASnsia2V5IjoiQUYwQUFBMTAzQ0E1MzdFQUVEODdDMjRERDUzOTA5QjgwQTc4QTkyM0UzODIzRDY4REFDQzk0QjlGRjgzMDVEQyJ98uZI4thGveOByYbomCeeP2Gy2rzs99FOBoDYVeWIUjyM+gfnW89DdJZAhxe74Tv0TnL5DRQYPCTRQPOoLbQ21NaeSho70FNE+n8XYKlVK5Ore6BoB6IVCaal5MkM27VmZPMmGflgcPx+pakx+EmRsYGdvYNImYxJYrRk3CI+l3T3ZiVpPPqebaVSLaSkEfu0iOFPjjLUhWN6QW6c18heE5vq/pcoeBf7p0Jgr9I5aBFY0avYG57BDGHzU1ZiQ9LLMTis2BA7Ap9pdNq8FVXL4fnoVHNZiiANOf3uvSknPKBID8sdOXUStA0crmO322FYjDqh1n6FG+D7+OJSayNsXIz6Zoy0eFn4HbT8nt8L2X2tdzkMayCYHXRwKh13Xyleqxt4WoEZmhwTmB3p9d1F0SylWnjcC6o/DnshJ9mMW/8D3oWS30Z7BwRODqKGVahRD0YGRzwMbVnEe5JFRfNvJZdLGl35L9632DVmuFQ0lr/8WNL/NrAJNtI6PXrZMNiza0/omPwPfe5ZYuD1Jgq59TX4h9d+3fdkArcJYL7AdoMZON1YEiWY5EzazQwtHd9yzdty9ZHPxAfuOfCh4OhbhFNp+v5YQ+PzKZ+UpM1VxV863+9XgWEURPNvX7qq1cpUSRzrSGq01QBBM3MKzRh5mAgqIdXgtl7L0EXAep0MECc7QY0/o3tW3VR8eEJGsSzrNxpFItqj0SEaIWo25dRfkl5zuw47GQrN9Qzxl2WV3A38MQPUqFtIr/71Rjkphgg49ZGWEYCwgFmm8jJc2/5qTabSGk4bzwiETCTzeydq30bUGqCwglj8CrFViAuQeTJm7dp+PYKMkUNvQRpnSXMj6Kz7rvAMzhzJgK62ltN2idqKxLC7WtivCUgejuQUvNreCYBQCaKwTwP02lZsJpGF9yw8gbyuoB+2aB7IZmgIB8GP4qVQ/ht5B9z/FLohK/8cSPV/4i32SNNdcwhV',\n        //     sessionResult:\n        //         'X3XtfGC7!H4sIAAAAAAAA/6tWykxRslJyDjaxNDMyM3E2MXIyNDUys3RU0lHKTS1KzkjMK3FMTs4vzSsBKgtJLS7xhYo6Z6QmZ+eXlgAVFpcklpQWA+WLUtNKi1NTlGoBMEEbz1cAAAA=iMsCaEJ5LcnsqIUtmNxjm8HtfQ8gZW8JewEU3wHz4qg='\n        // };\n    }\n\n    protected onComplete(state): void {\n        if (this.props.onComplete) this.props.onComplete(state, this.elementRef);\n    }\n\n    protected handleError = (error: AdyenCheckoutError): void => {\n        /**\n         * Set status using elementRef, which:\n         * - If Drop-in, will set status for Dropin component, and then it will propagate the new status for the active payment method component\n         * - If Component, it will set its own status\n         */\n        this.setElementStatus('ready');\n\n        if (error.name === NETWORK_ERROR && error.options.code) {\n            const event = new AnalyticsErrorEvent({\n                errorType: ANALYTICS_ERROR_TYPE.apiError,\n                code: error.options.code\n            });\n\n            this.submitAnalytics(event);\n        }\n\n        if (this.props.onError) {\n            this.props.onError(error, this.elementRef);\n        }\n    };\n\n    protected handleAdditionalDetails(state: AdditionalDetailsData): void {\n        this.makeAdditionalDetailsCall(state)\n            .then(sanitizeResponse)\n            .then(verifyPaymentDidNotFail)\n            .then(this.handleResponse)\n            .catch(this.handleFailedResult);\n    }\n\n    private makeAdditionalDetailsCall(state: AdditionalDetailsData): Promise<CheckoutSessionDetailsResponse | CheckoutAdvancedFlowResponse> {\n        if (this.props.onAdditionalDetails) {\n            return new Promise<CheckoutAdvancedFlowResponse>((resolve, reject) => {\n                this.props.onAdditionalDetails(state, this.elementRef, { resolve, reject });\n            });\n        }\n\n        if (this.core.session) {\n            return this.submitAdditionalDetailsUsingSessionsFlow(state.data);\n        }\n\n        this.handleError(\n            new AdyenCheckoutError(\n                'IMPLEMENTATION_ERROR',\n                'It can not perform /payments/details call. Callback \"onAdditionalDetails\" is missing or Checkout session is not available'\n            )\n        );\n    }\n\n    private async submitAdditionalDetailsUsingSessionsFlow(data: any): Promise<CheckoutSessionDetailsResponse> {\n        try {\n            return await this.core.session.submitDetails(data);\n        } catch (error: unknown) {\n            if (error instanceof AdyenCheckoutError) this.handleError(error);\n            else this.handleError(new AdyenCheckoutError('ERROR', 'Error when making /details call', { cause: error }));\n\n            return Promise.reject(error);\n        }\n    }\n\n    public handleAction(action: PaymentAction, props = {}): UIElement | null {\n        if (!action || !action.type) {\n            if (hasOwnProperty(action, 'action') && hasOwnProperty(action, 'resultCode')) {\n                throw new Error(\n                    'handleAction::Invalid Action - the passed action object itself has an \"action\" property and ' +\n                        'a \"resultCode\": have you passed in the whole response object by mistake?'\n                );\n            }\n            throw new Error('handleAction::Invalid Action - the passed action object does not have a \"type\" property');\n        }\n\n        const paymentAction = this.core.createFromAction(action, {\n            ...this.elementRef.props,\n            ...props,\n            onAdditionalDetails: this.handleAdditionalDetails\n        });\n\n        if (paymentAction) {\n            this.unmount();\n            return paymentAction.mount(this._node);\n        }\n\n        return null;\n    }\n\n    protected onActionHandled(actionHandledObj: ActionHandledReturnObject) {\n        this.props?.onActionHandled?.({ originalAction: this.props.originalAction, ...actionHandledObj });\n    }\n\n    protected handleOrder = (response: PaymentResponseData): void => {\n        const { order } = response;\n\n        const updateCorePromise = this.core.session ? this.core.update({ order }) : this.handleAdvanceFlowPaymentMethodsUpdate(order);\n\n        void updateCorePromise.then(() => {\n            this.props.onOrderUpdated?.({ order });\n        });\n    };\n\n    /**\n     * Handles when the payment fails. The payment fails when:\n     * - adv flow: the merchant rejects the payment due to a critical error\n     * - adv flow: the merchant resolves the payment with a failed resultCode\n     * - sessions: a network error occurs when making the payment\n     * - sessions: the payment fails with a failed resultCode\n     *\n     * @param result\n     */\n    protected handleFailedResult = (result?: PaymentResponseData): void => {\n        if (assertIsDropin(this.elementRef)) {\n            this.elementRef.displayFinalAnimation('error');\n        }\n\n        cleanupFinalResult(result);\n        this.props.onPaymentFailed?.(result, this.elementRef);\n    };\n\n    protected handleSuccessResult = (result: PaymentResponseData): void => {\n        if (assertIsDropin(this.elementRef)) {\n            this.elementRef.displayFinalAnimation('success');\n        }\n\n        cleanupFinalResult(result);\n        this.props.onPaymentCompleted?.(result, this.elementRef);\n    };\n\n    /**\n     * Handles a /payments or /payments/details response.\n     * The component will handle automatically actions, orders, and final results.\n     *\n     * Expected to be called after sanitizeResponse has been run on the raw payment response\n     *\n     * @param response -\n     */\n    protected handleResponse(response: PaymentResponseData): void {\n        if (response.action) {\n            this.elementRef.handleAction(response.action);\n            return;\n        }\n\n        if (response.order?.remainingAmount?.value > 0) {\n            // we don't want to call elementRef here, use the component handler\n            // we do this way so the logic on handlingOrder is associated with payment method\n            this.handleOrder(response);\n            return;\n        }\n\n        this.handleSuccessResult(response);\n    }\n\n    protected handleKeyPress(e: h.JSX.TargetedKeyboardEvent<HTMLInputElement> | KeyboardEvent) {\n        if (e.key === 'Enter' || e.code === 'Enter') {\n            e.preventDefault(); // Prevent <form> submission if Component is placed inside a form\n\n            this.onEnterKeyPressed(document?.activeElement, this);\n        }\n    }\n\n    /**\n     * Handle Enter key pressed from a UIElement (called via handleKeyPress)\n     * @param obj\n     */\n    protected onEnterKeyPressed(activeElement: Element, component: UIElement) {\n        if (this.props.onEnterKeyPressed) {\n            this.props.onEnterKeyPressed(activeElement, component);\n        } else {\n            (activeElement as HTMLElement).blur();\n            this.submit();\n        }\n    }\n\n    /**\n     * Call update on parent instance\n     * This function exist to make safe access to the protected _parentInstance\n     * @param options - CoreOptions\n     */\n    public updateParent(options: CoreConfiguration = {}): Promise<ICore> {\n        return this.elementRef.core.update(options);\n    }\n\n    public setComponentRef = (ref: ComponentMethodsRef) => {\n        this.componentRef = ref;\n    };\n\n    /**\n     * Get the current validation status of the element\n     */\n    public get isValid(): boolean {\n        return false;\n    }\n\n    /**\n     * Get the element icon URL for the current environment\n     */\n    public get icon(): string {\n        const type = this.props.paymentMethodType || this.type;\n        return this.props.icon ?? this.resources.getImage()(type);\n    }\n\n    /**\n     * Get the element's displayable name\n     */\n    public get displayName(): string {\n        const paymentMethodFromResponse = this.core.paymentMethodsResponse?.paymentMethods?.find(pm => pm.type === this.type);\n        return this.props.name || paymentMethodFromResponse?.name || this.type;\n    }\n\n    /**\n     * Get the element accessible name, used in the aria-label of the button that controls selected payment method\n     */\n    public get accessibleName(): string {\n        return this.displayName;\n    }\n\n    /**\n     * Used to display the second line of a payment method item\n     */\n    get additionalInfo(): string {\n        return null;\n    }\n\n    /**\n     * Return the type of an element\n     */\n    public get type(): string {\n        return this.props.type || this.constructor['type'];\n    }\n\n    /**\n     * Get the payButton component for the current element\n     */\n    protected payButton = (props: PayButtonFunctionProps) => {\n        return <PayButton {...props} amount={this.props.amount} secondaryAmount={this.props.secondaryAmount} onClick={this.submit} />;\n    };\n\n    /**\n     * Used in the Partial Orders flow.\n     * When the Order is updated, the merchant can request new payment methods based on the new remaining amount\n     *\n     * @private\n     */\n    protected async handleAdvanceFlowPaymentMethodsUpdate(order: Order | null, amount?: PaymentAmount) {\n        return new Promise<void | PaymentMethodsResponse>((resolve, reject) => {\n            if (!this.props.onPaymentMethodsRequest) {\n                return resolve();\n            }\n\n            this.props.onPaymentMethodsRequest(\n                {\n                    ...(order && {\n                        order: {\n                            orderData: order.orderData,\n                            pspReference: order.pspReference\n                        }\n                    }),\n                    locale: this.core.options.locale\n                },\n                { resolve, reject }\n            );\n        })\n            .catch(error => {\n                this.handleError(\n                    new AdyenCheckoutError(\n                        'IMPLEMENTATION_ERROR',\n                        'Something failed during payment methods update or onPaymentMethodsRequest was not implemented',\n                        {\n                            cause: error\n                        }\n                    )\n                );\n            })\n            .then(paymentMethodsResponse => {\n                // in the case of the session flow we get order, amount, countryCode and shopperLocale from initialize()\n                // apply the same logic here for order and amount\n                // in the future it might be worth moving this logic to be performed by the core on update()\n                // it would make this more consistent\n                return this.core.update({\n                    ...(paymentMethodsResponse && { paymentMethodsResponse }),\n                    order,\n                    amount: order ? order.remainingAmount : amount\n                });\n            });\n    }\n}\n\nexport default UIElement;\n"],"names":["UIElement","BaseElement","buildElementProps","componentProps","finalProps","_object_spread","showPayButton","this","core","getCorePropsForComponent","isStoredPaymentMethod","getPaymentMethodFromPaymentMethodsResponse","type","isDropin","assertIsDropin","props","formatProps","constructor","getRegulatoryDefaults","options","countryCode","_this_core_paymentMethodsResponse","paymentMethodsResponse","find","storeElementRefOnCore","storeElementReference","isAvailable","Promise","resolve","setState","newState","state","onChange","showValidation","componentRef","setElementStatus","status","_this_elementRef","elementRef","setStatus","_this_componentRef","_this_props_onChange","_this_props","call","data","isValid","errors","valid","setUpAnalytics","setUpAnalyticsObj","_this_props_session","sessionId","session","id","modules","analytics","setUp","submitAnalytics","analyticsObj","component","getComponent","sendAnalytics","error","console","warn","submit","makePaymentsCall","then","sanitizeResponse","verifyPaymentDidNotFail","handleResponse","catch","e","CancelError","handleFailedResult","onSubmit","submitUsingAdvancedFlow","beforeSubmit","reject","submitUsingSessionsFlow","handleError","AdyenCheckoutError","event","AnalyticsLogEvent","ANALYTICS_SUBMIT_STR","message","submitPayment","cause","onComplete","handleAdditionalDetails","makeAdditionalDetailsCall","onAdditionalDetails","submitAdditionalDetailsUsingSessionsFlow","submitDetails","handleAction","action","hasOwnProperty","Error","paymentAction","createFromAction","_object_spread_props","unmount","mount","_node","onActionHandled","actionHandledObj","_this_props_onActionHandled","originalAction","response","order","remainingAmount","value","handleOrder","handleSuccessResult","handleKeyPress","document","key","code","preventDefault","onEnterKeyPressed","activeElement","blur","updateParent","update","icon","paymentMethodType","_this_props_icon","resources","getImage","displayName","_this_core_paymentMethodsResponse_paymentMethods","paymentMethodFromResponse","paymentMethods","pm","name","accessibleName","additionalInfo","handleAdvanceFlowPaymentMethodsUpdate","amount","onPaymentMethodsRequest","orderData","pspReference","locale","checkout","super","_define_property","NETWORK_ERROR","AnalyticsErrorEvent","errorType","ANALYTICS_ERROR_TYPE","apiError","onError","_this_props_onOrderUpdated","onOrderUpdated","result","_this_props_onPaymentFailed","displayFinalAnimation","cleanupFinalResult","onPaymentFailed","_this_props_onPaymentCompleted","onPaymentCompleted","setComponentRef","ref","payButton","h","PayButton","secondaryAmount","onClick","register","bind","undefined","txVariants"],"mappings":"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"}