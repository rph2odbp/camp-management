{"version":3,"file":"CopyIconButton.js","sources":["../../../../../src/components/internal/Button/CopyIconButton.tsx"],"sourcesContent":["import { h } from 'preact';\nimport { useCallback, useRef } from 'preact/hooks';\nimport Button from './Button';\nimport { ButtonProps } from './types';\nimport { useCoreContext } from '../../../core/Context/CoreProvider';\nimport copyToClipboard from '../../../utils/clipboard';\nimport { SingletonTooltipProvider, useTooltip } from '../Tooltip/SingletonTooltipProvider';\nimport './CopyIconButton.scss';\n\nexport interface CopyIconButtonProps extends ButtonProps {\n    /**\n     * String that will get copied to the clipboard\n     */\n    text: string;\n}\n\nconst CopyIconButton = (props: CopyIconButtonProps) => {\n    const { i18n } = useCoreContext();\n    const anchorRef = useRef<HTMLButtonElement>(null);\n    const { showTooltip, hideTooltip } = useTooltip();\n\n    const onClick = useCallback(() => {\n        void copyToClipboard(props.text);\n        showTooltip({ anchorRef, text: i18n.get('button.copied') });\n    }, [props.text, i18n, showTooltip]);\n\n    // todo: remove it: onKeyPress is deprecated\n    const onKeyPress = useCallback(\n        (event: KeyboardEvent) => {\n            if (event.key === 'Enter' || event.code === 'Enter' || event.key === ' ' || event.code === 'Space') {\n                event.stopPropagation();\n            }\n        },\n        [hideTooltip]\n    );\n\n    // We need it because onKeyPress does not trigger for Esc key\n    const onKeyDown = useCallback(\n        (event: KeyboardEvent) => {\n            if (event.key === 'Enter' || event.code === 'Enter' || event.key === ' ' || event.code === 'Space') {\n                event.stopPropagation();\n            }\n\n            if (event.key === 'Escape' || event.code === 'Escape') {\n                event.stopPropagation();\n                hideTooltip();\n            }\n        },\n        [hideTooltip]\n    );\n\n    const handleShowTooltip = useCallback(() => {\n        showTooltip({ anchorRef, text: i18n.get('button.copy') });\n    }, [anchorRef, i18n, showTooltip]);\n\n    return (\n        <Button\n            {...props}\n            variant=\"iconOnly\"\n            buttonRef={anchorRef}\n            ariaLabel={props.ariaLabel ?? i18n.get('button.copy')}\n            onMouseEnter={handleShowTooltip}\n            onMouseLeave={hideTooltip}\n            onFocus={handleShowTooltip}\n            onBlur={hideTooltip}\n            onClick={onClick}\n            // It's ok to have both, browsers will fire only one click event for enter/space key pressed.\n            onKeyPress={onKeyPress}\n            onKeyDown={onKeyDown}\n        >\n            <svg\n                className=\"adyen-checkout__button--iconOnly__icon\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"16\"\n                height=\"16\"\n                viewBox=\"0 0 16 16\"\n                fill=\"none\"\n            >\n                <path d=\"M3.5 1.25C2.25736 1.25 1.25 2.25736 1.25 3.5V8.5C1.25 9.74264 2.25736 10.75 3.5 10.75H5.25V12.5C5.25 13.7426 6.25736 14.75 7.5 14.75H12.5C13.7426 14.75 14.75 13.7426 14.75 12.5V7.5C14.75 6.25736 13.7426 5.25 12.5 5.25H10.75V3.5C10.75 2.25736 9.74264 1.25 8.5 1.25H3.5ZM9.25 5.25H7.5C6.25736 5.25 5.25 6.25736 5.25 7.5V9.25H3.5C3.08579 9.25 2.75 8.91421 2.75 8.5V3.5C2.75 3.08579 3.08579 2.75 3.5 2.75H8.5C8.91421 2.75 9.25 3.08579 9.25 3.5V5.25ZM6.75 12.5V7.5C6.75 7.08579 7.08579 6.75 7.5 6.75H12.5C12.9142 6.75 13.25 7.08579 13.25 7.5V12.5C13.25 12.9142 12.9142 13.25 12.5 13.25H7.5C7.08579 13.25 6.75 12.9142 6.75 12.5Z\" />\n            </svg>\n        </Button>\n    );\n};\n\nconst withTooltip = (props: CopyIconButtonProps) => {\n    return (\n        <SingletonTooltipProvider>\n            <CopyIconButton {...props} />\n        </SingletonTooltipProvider>\n    );\n};\n\nexport { withTooltip as CopyIconButton };\n"],"names":["CopyIconButton","props","i18n","useCoreContext","anchorRef","useRef","showTooltip","hideTooltip","useTooltip","onClick","useCallback","copyToClipboard","text","get","onKeyPress","event","key","code","stopPropagation","onKeyDown","handleShowTooltip","h","Button","variant","buttonRef","ariaLabel","onMouseEnter","onMouseLeave","onFocus","onBlur","svg","className","xmlns","width","height","viewBox","fill","path","d","withTooltip","SingletonTooltipProvider"],"mappings":"s4BAgBA,MAAMA,EAAkBC,IACpB,MAAMC,KAAEA,GAASC,IACXC,EAAYC,EAA0B,OACtCC,YAAEA,EAAWC,YAAEA,GAAgBC,IAE/BC,EAAUC,EAAY,KACnBC,EAAgBV,EAAMW,MAC3BN,EAAY,CAAEF,YAAWQ,KAAMV,EAAKW,IAAI,oBACzC,CAACZ,EAAMW,KAAMV,EAAMI,IAGhBQ,EAAaJ,EACdK,IACqB,UAAdA,EAAMC,KAAkC,UAAfD,EAAME,MAAkC,MAAdF,EAAMC,KAA8B,UAAfD,EAAME,MAC9EF,EAAMG,mBAGd,CAACX,IAICY,EAAYT,EACbK,IACqB,UAAdA,EAAMC,KAAkC,UAAfD,EAAME,MAAkC,MAAdF,EAAMC,KAA8B,UAAfD,EAAME,MAC9EF,EAAMG,kBAGQ,WAAdH,EAAMC,KAAmC,WAAfD,EAAME,OAChCF,EAAMG,kBACNX,MAGR,CAACA,IAGCa,EAAoBV,EAAY,KAClCJ,EAAY,CAAEF,YAAWQ,KAAMV,EAAKW,IAAI,kBACzC,CAACT,EAAWF,EAAMI,IAOFL,IAAAA,EALnB,OACIoB,EAACC,EAAAA,oUAAAA,CAAAA,CAAAA,EACOrB,GAAAA,CACJsB,QAAQ,WACRC,UAAWpB,EACXqB,kBAAWxB,EAAAA,EAAMwB,iBAANxB,IAAAA,EAAAA,EAAmBC,EAAKW,IAAI,eACvCa,aAAcN,EACdO,aAAcpB,EACdqB,QAASR,EACTS,OAAQtB,EACRE,QAASA,EAETK,WAAYA,EACZK,UAAWA,IAEXE,EAACS,MAAAA,CACGC,UAAU,yCACVC,MAAM,6BACNC,MAAM,KACNC,OAAO,KACPC,QAAQ,YACRC,KAAK,QAELf,EAACgB,OAAAA,CAAKC,EAAE,snBAMlBC,EAAetC,GAEboB,EAACmB,EAAAA,KACGnB,EAACrB,EAAmBC"}