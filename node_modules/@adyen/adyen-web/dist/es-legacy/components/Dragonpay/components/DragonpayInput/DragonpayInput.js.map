{"version":3,"file":"DragonpayInput.js","sources":["../../../../../../src/components/Dragonpay/components/DragonpayInput/DragonpayInput.tsx"],"sourcesContent":["import { h } from 'preact';\nimport { useEffect, useState } from 'preact/hooks';\nimport useForm from '../../../../utils/useForm';\nimport Field from '../../../internal/FormFields/Field';\nimport getIssuerImageUrl from '../../../../utils/get-issuer-image';\nimport { useCoreContext } from '../../../../core/Context/CoreProvider';\nimport { DragonpayInputData, DragonpayInputIssuerItem, DragonpayInputProps } from '../../types';\nimport InputEmail from '../../../internal/FormFields/InputEmail';\nimport Select from '../../../internal/FormFields/Select';\nimport useImage from '../../../../core/Context/useImage';\nimport { validationRules } from '../../../../utils/Validator/defaultRules';\nimport { getErrorMessage } from '../../../../utils/getErrorMessage';\n\nexport default function DragonpayInput(props: DragonpayInputProps) {\n    const { i18n } = useCoreContext();\n    const getImage = useImage();\n    const isIssuerRequired = () => {\n        const typesRequiringIssuers = ['dragonpay_ebanking', 'dragonpay_otc_banking', 'dragonpay_otc_non_banking'];\n        return typesRequiringIssuers.indexOf(props.type) > -1;\n    };\n\n    const { handleChangeFor, triggerValidation, data, valid, errors, isValid } = useForm<DragonpayInputData>({\n        schema: [...(isIssuerRequired() ? ['issuer'] : []), 'shopperEmail'],\n        rules: {\n            issuer: {\n                validate: issuer => isIssuerRequired() && !!issuer,\n                modes: ['input', 'blur']\n            },\n            shopperEmail: validationRules.emailRule\n        }\n    });\n\n    const getIssuerIcon = getIssuerImageUrl({}, props.type, getImage);\n    const items = props.items.map(\n        (item: DragonpayInputIssuerItem): DragonpayInputIssuerItem => ({\n            ...item,\n            icon: getIssuerIcon(item.id && item.id.toLowerCase())\n        })\n    );\n\n    const getIssuerSelectFieldKey = type => {\n        if (type === 'dragonpay_otc_non_banking') {\n            return 'dragonpayVoucher.selectField.contextualText.nonBank';\n        }\n        return 'dragonpayVoucher.selectField.contextualText.bank';\n    };\n\n    useEffect(() => {\n        props.onChange({ isValid, data, valid, errors });\n    }, [isValid, data, valid, errors]);\n\n    const [status, setStatus] = useState('ready');\n    this.setStatus = setStatus;\n    this.showValidation = triggerValidation;\n\n    return (\n        <div className=\"adyen-checkout__dragonpay-input__field\">\n            <Field\n                label={i18n.get('shopperEmail')}\n                errorMessage={getErrorMessage(i18n, errors.shopperEmail, i18n.get('shopperEmail'))}\n                name={'dragonpay-shopperEmail'}\n            >\n                <InputEmail\n                    name={'dragonpay-shopperEmail'}\n                    autoCorrect={'off'}\n                    value={data.shopperEmail}\n                    className={'adyen-checkout__input--large'}\n                    spellCheck={false}\n                    onInput={handleChangeFor('shopperEmail', 'input')}\n                    onBlur={handleChangeFor('shopperEmail', 'blur')}\n                />\n            </Field>\n\n            {isIssuerRequired() && (\n                <Field label={i18n.get(getIssuerSelectFieldKey(props.type))} errorMessage={!!errors.issuer} name={'issuer'}>\n                    <Select\n                        items={items}\n                        selectedValue={data.issuer}\n                        name={'issuer'}\n                        className={'adyen-checkout__dropdown--large adyen-checkout__issuer-list__dropdown'}\n                        onChange={handleChangeFor('issuer')}\n                    />\n                </Field>\n            )}\n\n            {props.showPayButton && props.payButton({ status, label: i18n.get('confirmPurchase') })}\n        </div>\n    );\n}\n\nDragonpayInput.defaultProps = {\n    data: {},\n    items: [],\n    onChange: () => {}\n};\n"],"names":["DragonpayInput","props","i18n","useCoreContext","getImage","useImage","isIssuerRequired","indexOf","type","handleChangeFor","triggerValidation","data","valid","errors","isValid","useForm","schema","rules","issuer","validate","modes","shopperEmail","validationRules","emailRule","getIssuerIcon","getIssuerImageUrl","items","map","item","_object_spread_props","_object_spread","icon","id","toLowerCase","useEffect","onChange","status","setStatus","useState","this","showValidation","h","div","className","Field","label","get","errorMessage","getErrorMessage","name","InputEmail","autoCorrect","value","spellCheck","onInput","onBlur","Select","selectedValue","showPayButton","payButton","defaultProps"],"mappings":"wrCAae,SAASA,EAAeC,GACnC,MAAMC,KAAEA,GAASC,IACXC,EAAWC,IACXC,EAAmB,IACS,CAAC,qBAAsB,wBAAyB,6BACjDC,QAAQN,EAAMO,OAAQ,GAGjDC,gBAAEA,EAAeC,kBAAEA,EAAiBC,KAAEA,EAAIC,MAAEA,EAAKC,OAAEA,EAAMC,QAAEA,GAAYC,EAA4B,CACrGC,OAAQ,IAAKV,IAAqB,CAAC,UAAY,GAAK,gBACpDW,MAAO,CACHC,OAAQ,CACJC,SAAUD,GAAUZ,OAAwBY,EAC5CE,MAAO,CAAC,QAAS,SAErBC,aAAcC,EAAgBC,aAIhCC,EAAgBC,EAAkB,CAAA,EAAIxB,EAAMO,KAAMJ,GAClDsB,EAAQzB,EAAMyB,MAAMC,IACrBC,GAA8DC,oUAAAC,CAAA,GACxDF,GAAAA,CACHG,KAAMP,EAAcI,EAAKI,IAAMJ,EAAKI,GAAGC,kBAW/CC,EAAU,KACNjC,EAAMkC,SAAS,CAAErB,UAASH,OAAMC,QAAOC,YACxC,CAACC,EAASH,EAAMC,EAAOC,IAE1B,MAAOuB,EAAQC,GAAaC,EAAS,SAIrC,OAHAC,KAAKF,UAAYA,EACjBE,KAAKC,eAAiB9B,EAGlB+B,EAACC,MAAAA,CAAIC,UAAU,0CACXF,EAACG,EAAAA,CACGC,MAAO3C,EAAK4C,IAAI,gBAChBC,aAAcC,EAAgB9C,EAAMW,EAAOQ,aAAcnB,EAAK4C,IAAI,iBAClEG,KAAM,0BAENR,EAACS,EAAAA,CACGD,KAAM,yBACNE,YAAa,MACbC,MAAOzC,EAAKU,aACZsB,UAAW,+BACXU,YAAY,EACZC,QAAS7C,EAAgB,eAAgB,SACzC8C,OAAQ9C,EAAgB,eAAgB,WAI/CH,KACGmC,EAACG,EAAAA,CAAMC,MAAO3C,EAAK4C,KAlCCtC,EAkC2BP,EAAMO,KAjChD,8BAATA,EACO,sDAEJ,qDA8B8DuC,eAAgBlC,EAAOK,OAAQ+B,KAAM,UAC9FR,EAACe,EAAAA,CACG9B,MAAOA,EACP+B,cAAe9C,EAAKO,OACpB+B,KAAM,SACNN,UAAW,wEACXR,SAAU1B,EAAgB,aAKrCR,EAAMyD,eAAiBzD,EAAM0D,UAAU,CAAEvB,SAAQS,MAAO3C,EAAK4C,IAAI,sBA7C1CtC,IAAAA,CAgDpC,CAEAR,EAAe4D,aAAe,CAC1BjD,KAAM,CAAA,EACNe,MAAO,GACPS,SAAU"}