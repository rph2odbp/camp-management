{"version":3,"file":"UPIComponent.js","sources":["../../../../../../src/components/UPI/components/UPIComponent/UPIComponent.tsx"],"sourcesContent":["import { Fragment, h, RefObject } from 'preact';\nimport { useCallback, useEffect, useState } from 'preact/hooks';\nimport { PayButtonFunctionProps, UIElementStatus } from '../../../types';\nimport VpaInput, { VpaInputHandlers } from '../VpaInput/VpaInput';\nimport { App, UpiMode } from '../../types';\nimport useImage from '../../../../core/Context/useImage';\nimport { A11Y } from '../../constants';\nimport './UPIComponent.scss';\nimport SegmentedControl from '../../../internal/SegmentedControl';\nimport UPIIntentAppList from '../UPIIntentAppList';\nimport { useCoreContext } from '../../../../core/Context/CoreProvider';\nimport Alert from '../../../internal/Alert';\nimport { SegmentedControlOption } from '../../../internal/SegmentedControl/SegmentedControl';\n\ntype UpiData = { app?: App; virtualPaymentAddress?: string };\n\ntype OnChangeProps = { data: UpiData; valid?: { [key: string]: boolean }; errors?: { [key: string]: any }; isValid: boolean };\n\ninterface UPIComponentProps {\n    defaultMode: UpiMode;\n    showPayButton: boolean;\n    apps?: Array<App>;\n    segmentedControlOptions?: Array<SegmentedControlOption<UpiMode>>;\n\n    ref?(ref: RefObject<typeof UPIComponent>): void;\n\n    payButton?(props: PayButtonFunctionProps): h.JSX.Element;\n\n    onChange({ data, valid, errors, isValid }: OnChangeProps): void;\n\n    onUpdateMode?(mode: UpiMode): void;\n}\n\nexport default function UPIComponent({\n    defaultMode,\n    onChange,\n    onUpdateMode = () => {},\n    payButton,\n    showPayButton,\n    apps = [],\n    segmentedControlOptions = []\n}: Readonly<UPIComponentProps>): h.JSX.Element {\n    const { i18n } = useCoreContext();\n    const getImage = useImage();\n    const [status, setStatus] = useState<UIElementStatus>('ready');\n    const [mode, setMode] = useState<UpiMode>(defaultMode);\n    const [vpaInputHandlers, setVpaInputHandlers] = useState<VpaInputHandlers>(null);\n    const [selectedApp, setSelectedApp] = useState<App>(null);\n    const [isValid, setIsValid] = useState<boolean>(defaultMode === 'qrCode');\n\n    this.setStatus = (status: UIElementStatus) => {\n        setStatus(status);\n    };\n\n    this.showValidation = () => {\n        vpaInputHandlers?.validateInput();\n        if (mode === 'intent') {\n            validateIntentApp();\n        }\n    };\n\n    const onSetVpaInputHandlers = useCallback((handlers: VpaInputHandlers) => {\n        setVpaInputHandlers(handlers);\n    }, []);\n\n    const onChangeUpiMode = useCallback(\n        (newMode: UpiMode) => {\n            setMode(newMode);\n            onUpdateMode(newMode);\n        },\n        [onUpdateMode]\n    );\n\n    const handleAppSelect = useCallback(\n        (app: App) => {\n            if (app?.id === selectedApp?.id) return;\n\n            setSelectedApp(app);\n            setIsValid(true);\n            setStatus('ready');\n        },\n        [selectedApp]\n    );\n\n    const validateIntentApp = useCallback(() => {\n        if (!selectedApp) {\n            setStatus('error');\n            setIsValid(false);\n        } else {\n            setStatus('ready');\n            setIsValid(true);\n        }\n    }, [selectedApp]);\n\n    useEffect(() => {\n        if (mode !== 'qrCode') {\n            onChange({\n                data: { ...(selectedApp && { app: selectedApp }) },\n                isValid\n            });\n        } else {\n            /**\n             * When selecting QR code mode, we need to clear the state data and trigger the 'onChange'.\n             */\n            onChange({ data: {}, valid: {}, errors: {}, isValid: true });\n        }\n    }, [selectedApp, isValid, mode, onChange]);\n\n    return (\n        <Fragment>\n            {segmentedControlOptions.length > 0 && <p className=\"adyen-checkout_upi-mode-selection-text\">{i18n.get('upi.modeSelection')}</p>}\n            <SegmentedControl\n                onChange={onChangeUpiMode}\n                selectedValue={mode}\n                disabled={status === 'loading'}\n                classNameModifiers={['upi-margin-bottom']}\n                options={segmentedControlOptions}\n            />\n\n            {mode === 'intent' && (\n                <div id={A11Y.AreaId.INTENT} aria-labelledby={A11Y.ButtonId.INTENT} className=\"adyen-checkout-upi-area-intent\" role=\"region\">\n                    <span className=\"adyen-checkout-upi-instruction-label\">{i18n.get('upi.intent.instruction')}</span>\n                    {status === 'error' && <Alert icon={'cross'}>{i18n.get('upi.error.noAppSelected')}</Alert>}\n                    <UPIIntentAppList disabled={status === 'loading'} apps={apps} selectedAppId={selectedApp?.id} onAppSelect={handleAppSelect} />\n\n                    {showPayButton &&\n                        payButton({\n                            label: i18n.get('continue'),\n                            status\n                        })}\n                </div>\n            )}\n            {mode === 'vpa' && (\n                <div id={A11Y.AreaId.VPA} aria-labelledby={A11Y.ButtonId.VPA} className=\"adyen-checkout-upi-area-vpa\" role=\"region\">\n                    <span className=\"adyen-checkout-upi-instruction-label\">{i18n.get('upi.collect.instruction')}</span>\n                    <VpaInput disabled={status === 'loading'} onChange={onChange} onSetInputHandlers={onSetVpaInputHandlers} />\n\n                    {showPayButton &&\n                        payButton({\n                            label: i18n.get('continue'),\n                            status\n                        })}\n                </div>\n            )}\n            {mode === 'qrCode' && (\n                <div id={A11Y.AreaId.QR} aria-labelledby={A11Y.ButtonId.QR} className=\"adyen-checkout-upi-area-qr-code\" role=\"region\">\n                    <span className=\"adyen-checkout-upi-instruction-label\">{i18n.get('upi.qrCode.instruction')}</span>\n                    {showPayButton &&\n                        payButton({\n                            label: i18n.get('generateQRCode'),\n                            icon: getImage({ imageFolder: 'components/' })('qr'),\n                            status\n                        })}\n                </div>\n            )}\n        </Fragment>\n    );\n}\n"],"names":["UPIComponent","defaultMode","onChange","onUpdateMode","payButton","showPayButton","apps","segmentedControlOptions","i18n","useCoreContext","getImage","useImage","status","setStatus","useState","mode","setMode","vpaInputHandlers","setVpaInputHandlers","selectedApp","setSelectedApp","isValid","setIsValid","this","showValidation","validateInput","validateIntentApp","onSetVpaInputHandlers","useCallback","handlers","onChangeUpiMode","newMode","handleAppSelect","app","id","useEffect","data","_object_spread","valid","errors","h","Fragment","length","p","className","get","SegmentedControl","selectedValue","disabled","classNameModifiers","options","div","A11Y","AreaId","INTENT","aria-labelledby","ButtonId","role","span","Alert","icon","UPIIntentAppList","selectedAppId","onAppSelect","label","VPA","VpaInput","onSetInputHandlers","QR","imageFolder"],"mappings":"4/BAiCe,SAASA,GAAaC,YACjCA,EAAWC,SACXA,EAAQC,aACRA,EAAe,OAAQC,UACvBA,EAASC,cACTA,EAAaC,KACbA,EAAO,GAAEC,wBACTA,EAA0B,KAE1B,MAAMC,KAAEA,GAASC,IACXC,EAAWC,KACVC,EAAQC,GAAaC,EAA0B,UAC/CC,EAAMC,GAAWF,EAAkBb,IACnCgB,EAAkBC,GAAuBJ,EAA2B,OACpEK,EAAaC,GAAkBN,EAAc,OAC7CO,EAASC,GAAcR,EAAkC,WAAhBb,GAEhDsB,KAAKV,UAAaD,IACdC,EAAUD,IAGdW,KAAKC,eAAiB,KAClBP,SAAAA,EAAkBQ,gBACL,WAATV,GACAW,KAIR,MAAMC,EAAwBC,EAAaC,IACvCX,EAAoBW,IACrB,IAEGC,EAAkBF,EACnBG,IACGf,EAAQe,GACR5B,EAAa4B,IAEjB,CAAC5B,IAGC6B,EAAkBJ,EACnBK,KACOA,aAAAA,EAAAA,EAAKC,OAAOf,aAAAA,EAAAA,EAAae,MAE7Bd,EAAea,GACfX,GAAW,GACXT,EAAU,WAEd,CAACM,IAGCO,EAAoBE,EAAY,KAC7BT,GAIDN,EAAU,SACVS,GAAW,KAJXT,EAAU,SACVS,GAAW,KAKhB,CAACH,IAgBJ,OAdAgB,EAAU,KAEFjC,EADS,WAATa,EACS,CACLqB,KAAMC,KAAMlB,GAAe,CAAEc,IAAKd,IAClCE,WAMK,CAAEe,KAAM,CAAA,EAAIE,MAAO,CAAA,EAAIC,OAAQ,CAAA,EAAIlB,SAAS,KAE1D,CAACF,EAAaE,EAASN,EAAMb,IAG5BsC,EAACC,EAAAA,KACIlC,EAAwBmC,OAAS,GAAKF,EAACG,IAAAA,CAAEC,UAAU,0CAA0CpC,EAAKqC,IAAI,sBACvGL,EAACM,EAAAA,CACG5C,SAAU4B,EACViB,cAAehC,EACfiC,SAAqB,YAAXpC,EACVqC,mBAAoB,CAAC,qBACrBC,QAAS3C,IAGH,WAATQ,GACGyB,EAACW,MAAAA,CAAIjB,GAAIkB,EAAKC,OAAOC,OAAQC,kBAAiBH,EAAKI,SAASF,OAAQV,UAAU,iCAAiCa,KAAK,UAChHjB,EAACkB,OAAAA,CAAKd,UAAU,wCAAwCpC,EAAKqC,IAAI,2BACrD,UAAXjC,GAAsB4B,EAACmB,EAAAA,CAAMC,KAAM,SAAUpD,EAAKqC,IAAI,4BACvDL,EAACqB,EAAAA,CAAiBb,SAAqB,YAAXpC,EAAsBN,KAAMA,EAAMwD,cAAe3C,aAAAA,EAAAA,EAAae,GAAI6B,YAAa/B,IAE1G3B,GACGD,EAAU,CACN4D,MAAOxD,EAAKqC,IAAI,YAChBjC,YAIN,QAATG,GACGyB,EAACW,MAAAA,CAAIjB,GAAIkB,EAAKC,OAAOY,IAAKV,kBAAiBH,EAAKI,SAASS,IAAKrB,UAAU,8BAA8Ba,KAAK,UACvGjB,EAACkB,OAAAA,CAAKd,UAAU,wCAAwCpC,EAAKqC,IAAI,4BACjEL,EAAC0B,EAAAA,CAASlB,SAAqB,YAAXpC,EAAsBV,SAAUA,EAAUiE,mBAAoBxC,IAEjFtB,GACGD,EAAU,CACN4D,MAAOxD,EAAKqC,IAAI,YAChBjC,YAIN,WAATG,GACGyB,EAACW,MAAAA,CAAIjB,GAAIkB,EAAKC,OAAOe,GAAIb,kBAAiBH,EAAKI,SAASY,GAAIxB,UAAU,kCAAkCa,KAAK,UACzGjB,EAACkB,OAAAA,CAAKd,UAAU,wCAAwCpC,EAAKqC,IAAI,2BAChExC,GACGD,EAAU,CACN4D,MAAOxD,EAAKqC,IAAI,kBAChBe,KAAMlD,EAAS,CAAE2D,YAAa,eAAxB3D,CAAyC,MAC/CE,YAM5B"}