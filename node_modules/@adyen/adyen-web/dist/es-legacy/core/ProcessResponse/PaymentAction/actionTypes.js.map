{"version":3,"file":"actionTypes.js","sources":["../../../../../src/core/ProcessResponse/PaymentAction/actionTypes.ts"],"sourcesContent":["import { get3DS2FlowProps } from '../../../components/ThreeDS2/components/utils';\nimport uuid from '../../../utils/uuid';\nimport UIElement from '../../../components/internal/UIElement';\nimport type { PaymentAction } from '../../../types/global-types';\nimport type { IRegistry } from '../../core.registry';\nimport type { ICore } from '../../types';\n\nconst createComponent = (core: ICore, registry: IRegistry, componentType, props): UIElement => {\n    const Element = registry.getComponent(componentType);\n\n    if (!Element) {\n        throw Error(`Action Element of type ${componentType} not found in the registry`);\n    }\n\n    return new Element(core, { ...props, id: `${componentType}-${uuid()}` });\n};\n\nconst getActionHandler = statusType => {\n    return (core: ICore, registry: IRegistry, action: PaymentAction, props) => {\n        const config = {\n            ...props,\n            ...action,\n            onComplete: props.onAdditionalDetails,\n            onError: props.onError,\n            statusType,\n            originalAction: action\n        };\n\n        return createComponent(core, registry, action.paymentMethodType, config);\n    };\n};\n\nconst actionTypes = {\n    redirect: (core: ICore, registry, action: PaymentAction, props) => {\n        const config = {\n            ...props,\n            ...action,\n            statusType: 'redirect',\n            originalAction: action\n        };\n\n        return createComponent(core, registry, 'redirect', config);\n    },\n\n    threeDS2: (core: ICore, registry, action: PaymentAction, props) => {\n        const componentType = action.subtype === 'fingerprint' ? 'threeDS2DeviceFingerprint' : 'threeDS2Challenge';\n\n        /**\n         * NOTE: the isMDFlow prop comes from the options object, added within the MDFlow when it calls createFromAction(action, options) to initiate a 3DS2 component\n         * It replaces the useOriginalFlow config prop that the MDFlow used to pass when directly initiating the threeDS2Fingerprint or threeDS2Challenge components\n         */\n        const paymentData = action.subtype === 'fingerprint' || props.isMDFlow ? action.paymentData : action.authorisationToken;\n\n        const config = {\n            // Props common to both flows\n            core: core,\n            token: action.token,\n            paymentData,\n            onActionHandled: props.onActionHandled,\n            onComplete: props.isMDFlow ? props.onComplete : props.onAdditionalDetails,\n            onError: props.onError,\n            isDropin: !!props.isDropin,\n            loadingContext: props.loadingContext,\n            clientKey: props.clientKey,\n            paymentMethodType: props.paymentMethodType,\n            challengeWindowSize: props.challengeWindowSize, // always pass challengeWindowSize in case it's been set directly in the handleAction config object\n            isMDFlow: props.isMDFlow,\n            modules: {\n                analytics: props.modules?.analytics,\n                resources: props.modules?.resources\n            },\n\n            // Props unique to a particular flow\n            ...get3DS2FlowProps(action.subtype, props)\n        };\n\n        return createComponent(core, registry, componentType, config);\n    },\n\n    voucher: getActionHandler('custom'),\n    qrCode: getActionHandler('custom'),\n    await: getActionHandler('custom'),\n    bankTransfer: getActionHandler('custom'),\n    sdk: getActionHandler('custom')\n} as const;\n\nexport default actionTypes;\n"],"names":["createComponent","core","registry","componentType","props","Element","getComponent","Error","_object_spread_props","_object_spread","id","uuid","getActionHandler","statusType","action","config","onComplete","onAdditionalDetails","onError","originalAction","paymentMethodType","actionTypes","redirect","threeDS2","subtype","paymentData","isMDFlow","authorisationToken","token","onActionHandled","isDropin","loadingContext","clientKey","challengeWindowSize","modules","analytics","resources","get3DS2FlowProps","voucher","qrCode","await","bankTransfer","sdk"],"mappings":"m6BAOA,MAAMA,EAAkB,CAACC,EAAaC,EAAqBC,EAAeC,KACtE,MAAMC,EAAUH,EAASI,aAAaH,GAEtC,IAAKE,EACD,MAAME,MAAM,0BAA0BJ,+BAG1C,OAAO,IAAIE,EAAQJ,EAAMO,EAAAC,EAAA,CAAA,EAAKL,GAAAA,CAAOM,GAAI,GAAGP,KAAiBQ,UAG3DC,EAAmBC,GACd,CAACZ,EAAaC,EAAqBY,EAAuBV,KAC7D,MAAMW,EAASP,OACRJ,EACAU,GAAAA,CACHE,WAAYZ,EAAMa,oBAClBC,QAASd,EAAMc,QACfL,aACAM,eAAgBL,IAGpB,OAAOd,EAAgBC,EAAMC,EAAUY,EAAOM,kBAAmBL,IAInEM,EAAc,CAChBC,SAAU,CAACrB,EAAaC,EAAUY,EAAuBV,KACrD,MAAMW,EAASP,OACRJ,EACAU,GAAAA,CACHD,WAAY,WACZM,eAAgBL,IAGpB,OAAOd,EAAgBC,EAAMC,EAAU,WAAYa,IAGvDQ,SAAU,CAACtB,EAAaC,EAAUY,EAAuBV,SAwBlCA,EACAA,EAxBnB,MAAMD,EAAmC,gBAAnBW,EAAOU,QAA4B,4BAA8B,oBAMjFC,EAAiC,gBAAnBX,EAAOU,SAA6BpB,EAAMsB,SAAWZ,EAAOW,YAAcX,EAAOa,mBAE/FZ,EAASN,EAAA,CAEXR,KAAMA,EACN2B,MAAOd,EAAOc,MACdH,cACAI,gBAAiBzB,EAAMyB,gBACvBb,WAAYZ,EAAMsB,SAAWtB,EAAMY,WAAaZ,EAAMa,oBACtDC,QAASd,EAAMc,QACfY,WAAY1B,EAAM0B,SAClBC,eAAgB3B,EAAM2B,eACtBC,UAAW5B,EAAM4B,UACjBZ,kBAAmBhB,EAAMgB,kBACzBa,oBAAqB7B,EAAM6B,oBAC3BP,SAAUtB,EAAMsB,SAChBQ,QAAS,CACLC,UAAwB,QAAb/B,EAAAA,EAAM8B,eAAN9B,IAAAA,OAAAA,EAAAA,EAAe+B,UAC1BC,UAAwB,QAAbhC,EAAAA,EAAM8B,eAAN9B,IAAAA,OAAAA,EAAAA,EAAegC,YAI3BC,EAAiBvB,EAAOU,QAASpB,IAGxC,OAAOJ,EAAgBC,EAAMC,EAAUC,EAAeY,IAG1DuB,QAAS1B,EAAiB,UAC1B2B,OAAQ3B,EAAiB,UACzB4B,MAAO5B,EAAiB,UACxB6B,aAAc7B,EAAiB,UAC/B8B,IAAK9B,EAAiB"}