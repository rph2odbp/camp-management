{"version":3,"file":"AnalyticsInfoEvent.js","sources":["../../../../src/core/Analytics/AnalyticsInfoEvent.ts"],"sourcesContent":["import { AnalyticsEvent } from './AnalyticsEvent';\nimport { ANALYTICS_EVENT, ANALYTICS_VALIDATION_ERROR_STR } from './constants';\nimport { mapErrorCodesForAnalytics } from './utils';\n\ntype AnalyticsInfoEventObject = {\n    type: string;\n    target?: string;\n    issuer?: string;\n    isExpress?: boolean;\n    expressPage?: string;\n    isStoredPaymentMethod?: boolean;\n    brand?: string;\n    validationErrorCode?: string;\n    validationErrorMessage?: string;\n    configData?: Record<string, string | boolean>;\n    component?: string;\n};\n\nexport class AnalyticsInfoEvent extends AnalyticsEvent {\n    public type: string;\n    public target: string;\n    public issuer?: string;\n    public isExpress?: boolean;\n    public expressPage?: string;\n    public isStoredPaymentMethod?: boolean;\n    public brand?: string;\n    public validationErrorCode?: string;\n    public validationErrorMessage?: string;\n    public configData?: Record<string, string | boolean>;\n\n    constructor(analyticsObject: AnalyticsInfoEventObject) {\n        super();\n\n        this.component = analyticsObject.component;\n\n        this.type = analyticsObject.type;\n        this.target = analyticsObject.target;\n        this.issuer = analyticsObject.issuer;\n        this.isExpress = analyticsObject.isExpress;\n        this.isStoredPaymentMethod = analyticsObject.isStoredPaymentMethod;\n        this.isExpress = analyticsObject.isExpress;\n        this.expressPage = analyticsObject.expressPage;\n        this.brand = analyticsObject.brand;\n        this.validationErrorCode = analyticsObject.validationErrorCode;\n        this.validationErrorMessage = analyticsObject.validationErrorMessage;\n        this.configData = analyticsObject.configData;\n\n        // Some of the more generic validation error codes required combination with target to retrieve a specific code\n        if (this.type === ANALYTICS_VALIDATION_ERROR_STR) {\n            this.validationErrorCode = mapErrorCodesForAnalytics(this.validationErrorCode, this.target);\n        }\n\n        return this;\n    }\n\n    public getEventCategory(): string {\n        return ANALYTICS_EVENT.info;\n    }\n}\n"],"names":["AnalyticsInfoEvent","AnalyticsEvent","getEventCategory","ANALYTICS_EVENT","info","constructor","analyticsObject","super","_define_property","this","type","target","issuer","isExpress","expressPage","isStoredPaymentMethod","brand","validationErrorCode","validationErrorMessage","configData","component","ANALYTICS_VALIDATION_ERROR_STR","mapErrorCodesForAnalytics"],"mappings":"yTAkBO,MAAMA,UAA2BC,EAqC7BC,gBAAAA,GACH,OAAOC,EAAgBC,IAC3B,CA3BA,WAAAC,CAAYC,GAsBR,OArBAC,QAZJC,EAAAC,KAAOC,YAAP,GACAF,OAAOG,cAAP,GACAH,EAAAC,KAAOG,cAAP,GACAJ,OAAOK,iBAAP,GACAL,EAAAC,KAAOK,mBAAP,GACAN,OAAOO,6BAAP,GACAP,EAAAC,KAAOO,aAAP,GACAR,EAAAC,KAAOQ,2BAAP,GACAT,EAAAC,KAAOS,8BAAP,GACAV,EAAAC,KAAOU,kBAAP,GAKIV,KAAKW,UAAYd,EAAgBc,UAEjCX,KAAKC,KAAOJ,EAAgBI,KAC5BD,KAAKE,OAASL,EAAgBK,OAC9BF,KAAKG,OAASN,EAAgBM,OAC9BH,KAAKI,UAAYP,EAAgBO,UACjCJ,KAAKM,sBAAwBT,EAAgBS,sBAC7CN,KAAKI,UAAYP,EAAgBO,UACjCJ,KAAKK,YAAcR,EAAgBQ,YACnCL,KAAKO,MAAQV,EAAgBU,MAC7BP,KAAKQ,oBAAsBX,EAAgBW,oBAC3CR,KAAKS,uBAAyBZ,EAAgBY,uBAC9CT,KAAKU,WAAab,EAAgBa,WAG9BV,KAAKC,OAASW,IACdZ,KAAKQ,oBAAsBK,EAA0Bb,KAAKQ,oBAAqBR,KAAKE,SAGjFF,IACX"}