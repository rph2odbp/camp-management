{"version":3,"file":"core.js","sources":["../../../src/core/core.ts"],"sourcesContent":["import Language from '../language';\nimport UIElement from '../components/internal/UIElement/UIElement';\nimport RiskModule from './RiskModule';\nimport PaymentMethods from './ProcessResponse/PaymentMethods';\nimport getComponentForAction from './ProcessResponse/PaymentAction';\nimport Analytics from './Analytics';\nimport { assertConfigurationPropertiesAreValid, processGlobalOptions } from './utils';\nimport Session from './CheckoutSession';\nimport { hasOwnProperty } from '../utils/hasOwnProperty';\nimport { Resources } from './Context/Resources';\nimport { SRPanel } from './Errors/SRPanel';\nimport registry, { NewableComponent } from './core.registry';\nimport { cleanupFinalResult, sanitizeResponse, verifyPaymentDidNotFail } from '../components/internal/UIElement/utils';\nimport AdyenCheckoutError, { IMPLEMENTATION_ERROR } from './Errors/AdyenCheckoutError';\nimport { ANALYTICS_ACTION_STR } from './Analytics/constants';\nimport { THREEDS2_FULL } from '../components/ThreeDS2/constants';\nimport { DEFAULT_LOCALE } from '../language/constants';\nimport getTranslations from './Services/get-translations';\nimport { defaultProps } from './core.defaultProps';\nimport { formatCustomTranslations, formatLocale } from '../language/utils';\nimport { resolveEnvironments } from './Environment';\n\nimport type { AnalyticsModule, PaymentAction, PaymentResponseData } from '../types/global-types';\nimport type { CoreConfiguration, ICore, AdditionalDetailsData } from './types';\nimport type { Translations } from '../language/types';\nimport type { UIElementProps } from '../components/internal/UIElement/types';\nimport { AnalyticsLogEvent } from './Analytics/AnalyticsLogEvent';\nimport CancelError from './Errors/CancelError';\n\nclass Core implements ICore {\n    public session?: Session;\n    public paymentMethodsResponse: PaymentMethods;\n    public modules: Readonly<{\n        risk: RiskModule;\n        analytics: AnalyticsModule;\n        resources: Resources;\n        i18n: Language;\n        srPanel: SRPanel;\n    }>;\n    public options: CoreConfiguration;\n\n    public analyticsContext: string;\n    public loadingContext: string;\n    public cdnImagesUrl: string;\n    public cdnTranslationsUrl: string;\n\n    private components: UIElement[] = [];\n\n    public static readonly metadata = {\n        version: process.env.VERSION,\n        bundleType: process.env.BUNDLE_TYPE\n    };\n\n    public static registry = registry;\n\n    public static setBundleType(type: string): void {\n        Core.metadata.bundleType = type;\n    }\n\n    public static register(...items: NewableComponent[]) {\n        registry.add(...items);\n    }\n\n    /**\n     * Used internally by the PaymentMethod components to auto-register themselves\n     * @internal\n     */\n    public register(...items: NewableComponent[]) {\n        registry.add(...items);\n    }\n\n    public getComponent(txVariant: string) {\n        return registry.getComponent(txVariant);\n    }\n\n    constructor(props: CoreConfiguration) {\n        assertConfigurationPropertiesAreValid(props);\n\n        this.createFromAction = this.createFromAction.bind(this);\n\n        this.setOptions({ ...defaultProps, ...props });\n\n        const { apiUrl, analyticsUrl, cdnImagesUrl, cdnTranslationsUrl } = resolveEnvironments(\n            this.options.environment,\n            this.options._environmentUrls\n        );\n\n        this.loadingContext = apiUrl;\n        this.analyticsContext = analyticsUrl;\n        this.cdnImagesUrl = cdnImagesUrl;\n        this.cdnTranslationsUrl = cdnTranslationsUrl;\n\n        this.session = this.options.session && new Session(this.options.session, this.options.clientKey, this.loadingContext);\n\n        const clientKeyType = this.options.clientKey?.substring(0, 4);\n        if ((clientKeyType === 'test' || clientKeyType === 'live') && !this.loadingContext.includes(clientKeyType)) {\n            throw new AdyenCheckoutError(\n                'IMPLEMENTATION_ERROR',\n                `Error: you are using a ${clientKeyType} clientKey against the ${this.options._environmentUrls?.api || this.options.environment} environment`\n            );\n        }\n        if (clientKeyType === 'pub.') {\n            console.debug(\n                `The value you are passing as your \"clientKey\" looks like an originKey (${this.options.clientKey?.substring(0, 12)}..). Although this is supported it is not the recommended way to integrate. To generate a clientKey, see the documentation (https://docs.adyen.com/development-resources/client-side-authentication/migrate-from-origin-key-to-client-key/) for more details.`\n            );\n        }\n\n        if (this.options.exposeLibraryMetadata) {\n            window['AdyenWebMetadata'] = Core.metadata;\n        }\n    }\n\n    public async initialize(): Promise<this> {\n        await this.initializeCore();\n        this.validateCoreConfiguration();\n        await this.createCoreModules();\n        return this;\n    }\n\n    private async initializeCore(): Promise<this> {\n        if (this.session) {\n            return this.session\n                .setupSession(this.options)\n                .then(sessionResponse => {\n                    const { amount, shopperLocale, countryCode, paymentMethods, ...rest } = sessionResponse;\n\n                    this.setOptions({\n                        ...rest,\n                        amount: this.options.order ? this.options.order.remainingAmount : amount,\n                        locale: this.options.locale || shopperLocale,\n                        countryCode: this.options.countryCode || countryCode\n                    });\n\n                    this.createPaymentMethodsList(paymentMethods);\n\n                    return this;\n                })\n                .catch(error => {\n                    if (this.options.onError) this.options.onError(error);\n                    return Promise.reject(error);\n                });\n        }\n\n        this.createPaymentMethodsList();\n        return Promise.resolve(this);\n    }\n\n    private async fetchLocaleTranslations(): Promise<Translations> {\n        try {\n            return await getTranslations(this.cdnTranslationsUrl, Core.metadata.version, this.options.locale);\n        } catch (error: unknown) {\n            if (error instanceof AdyenCheckoutError) this.options.onError?.(error);\n            else this.options.onError?.(new AdyenCheckoutError('ERROR', 'Failed to fetch translation', { cause: error }));\n        }\n    }\n\n    private validateCoreConfiguration(): void {\n        // @ts-ignore This property does not exist, although merchants might be using when migrating from v5 to v6\n        if (this.options.paymentMethodsConfiguration) {\n            console.warn('WARNING:  \"paymentMethodsConfiguration\" is supported only by Drop-in.');\n        }\n\n        if (!this.options.countryCode) {\n            throw new AdyenCheckoutError(IMPLEMENTATION_ERROR, 'You must specify a countryCode when initializing checkout.');\n        }\n\n        if (!this.options.locale) {\n            this.setOptions({ locale: DEFAULT_LOCALE });\n        }\n\n        this.options.locale = formatLocale(this.options.locale);\n        this.options.translations = formatCustomTranslations(this.options.translations);\n    }\n\n    /**\n     * Method used when handling redirects. It submits details using 'onAdditionalDetails' or the Sessions flow if available.\n     *\n     * @public\n     * @see {https://docs.adyen.com/online-payments/build-your-integration/?platform=Web&integration=Components&version=5.55.1#handle-the-redirect}\n     * @param details - Details object containing the redirectResult\n     */\n    public submitDetails(details: AdditionalDetailsData['data']): void {\n        let promise = null;\n\n        if (this.options.onAdditionalDetails) {\n            promise = new Promise((resolve, reject) => {\n                this.options.onAdditionalDetails({ data: details }, undefined, { resolve, reject });\n            });\n        }\n\n        if (this.session) {\n            promise = this.session.submitDetails(details).catch(error => {\n                this.options.onError?.(error);\n                return Promise.reject(error);\n            });\n        }\n\n        if (!promise) {\n            this.options.onError?.(\n                new AdyenCheckoutError(\n                    'IMPLEMENTATION_ERROR',\n                    'It can not submit the details. The callback \"onAdditionalDetails\" or the Session is not setup correctly.'\n                )\n            );\n            return;\n        }\n\n        promise\n            .then(sanitizeResponse)\n            .then(verifyPaymentDidNotFail)\n            .then(this.afterAdditionalDetails)\n            .then((response: PaymentResponseData) => {\n                cleanupFinalResult(response);\n                this.options.onPaymentCompleted?.(response);\n            })\n            .catch((e: PaymentResponseData | Error) => {\n                if (e instanceof CancelError) {\n                    return;\n                }\n\n                cleanupFinalResult(e as PaymentResponseData);\n                this.options.onPaymentFailed?.(e as PaymentResponseData);\n            });\n    }\n\n    private readonly afterAdditionalDetails = (response: PaymentResponseData): Promise<PaymentResponseData | Error> => {\n        /**\n         * After the user is redirected back, a request to `/details` or `/paymentDetails` will be made.\n         * Typically, the response will not include an action object, except for the case of `paybybank_pix` payment method.\n         * In terms of `paybybank_pix`, the action UIElement will be created and passed to the `afterAdditionalDetails` callback, allowing it to be mounted on the page.\n         */\n        if (this.options.afterAdditionalDetails && response?.action) {\n            const actionEle = this.createFromAction(response.action);\n            this.options.afterAdditionalDetails(actionEle);\n            return Promise.reject(new CancelError('Handled by afterAdditionalDetails'));\n        }\n        return Promise.resolve(response);\n    };\n\n    /**\n     * Instantiates a new element component ready to be mounted from an action object\n     *\n     * @param action - action defining the component with the component data\n     * @param options - options that will be merged to the global Checkout props\n     * @returns new UIElement\n     */\n    public createFromAction(action: PaymentAction, options = {}): UIElement {\n        if (!action || !action.type) {\n            if (hasOwnProperty(action, 'action') && hasOwnProperty(action, 'resultCode')) {\n                throw new Error(\n                    'createFromAction::Invalid Action - the passed action object itself has an \"action\" property and ' +\n                        'a \"resultCode\": have you passed in the whole response object by mistake?'\n                );\n            }\n            throw new Error('createFromAction::Invalid Action - the passed action object does not have a \"type\" property');\n        }\n\n        if (action.type) {\n            // 'threeDS2' OR 'qrCode', 'voucher', 'redirect', 'await', 'bankTransfer`\n            const component = action.type === THREEDS2_FULL ? `${action.type}${action.subtype}` : action.paymentMethodType;\n\n            const event = new AnalyticsLogEvent({\n                type: ANALYTICS_ACTION_STR,\n                subType: action.type,\n                message: `${component} action was handled by the SDK`,\n                component\n            });\n            this.modules.analytics.sendAnalytics(event);\n\n            const props = {\n                ...this.getCorePropsForComponent(),\n                ...options\n            };\n\n            return getComponentForAction(this, registry, action, props);\n        }\n\n        return this.handleCreateError();\n    }\n\n    /**\n     * Updates global configurations, resets the internal state and remounts each element.\n     *\n     * @param options - props to update\n     * @returns this - the element instance\n     */\n    public update = (options: Partial<CoreConfiguration> = {}): Promise<this> => {\n        this.setOptions(options);\n\n        return this.initialize().then(() => {\n            this.components.forEach(component => {\n                // We update only with the new options that have been received\n                const newProps: Partial<UIElementProps> = {\n                    ...options,\n                    ...(this.session && { session: this.session })\n                };\n                component.update(newProps);\n            });\n            return this;\n        });\n    };\n\n    /**\n     * Remove the reference of a component\n     * @param component - reference to the component to be removed\n     * @returns this - the element instance\n     * // TODO: Do we need this?\n     */\n    public remove = (component): this => {\n        this.components = this.components.filter(c => c._id !== component._id);\n        component.unmount();\n\n        return this;\n    };\n\n    /**\n     * @internal\n     * Create or update the config object passed when AdyenCheckout is initialised (environment, clientKey, etc...)\n     */\n    private setOptions = (options: CoreConfiguration): void => {\n        this.options = {\n            ...this.options,\n            ...options,\n            locale: options?.locale || this.options?.locale\n        };\n    };\n\n    /**\n     * @internal\n     * @returns props for a new UIElement\n     */\n    public getCorePropsForComponent(): any {\n        const globalOptions = processGlobalOptions(this.options);\n\n        return {\n            ...globalOptions,\n            core: this,\n            i18n: this.modules.i18n,\n            modules: this.modules,\n            session: this.session,\n            loadingContext: this.loadingContext,\n            cdnContext: this.cdnImagesUrl,\n            createFromAction: this.createFromAction\n        };\n    }\n\n    public storeElementReference(element: UIElement) {\n        if (element) {\n            this.components.push(element);\n        }\n    }\n\n    /**\n     * @internal\n     */\n    private handleCreateError(paymentMethod?): never {\n        const paymentMethodName = paymentMethod?.name ?? 'The passed payment method';\n        const errorMessage = paymentMethod\n            ? `${paymentMethodName} is not a valid Checkout Component. What was passed as a txVariant was: ${JSON.stringify(\n                  paymentMethod\n              )}. Check if this payment method is configured in the Backoffice or if the txVariant is a valid one`\n            : 'No Payment Method component was passed';\n\n        throw new Error(errorMessage);\n    }\n\n    private createPaymentMethodsList(paymentMethodsResponse?: PaymentMethods): void {\n        this.paymentMethodsResponse = new PaymentMethods(this.options.paymentMethodsResponse || paymentMethodsResponse, this.options);\n    }\n\n    private async createCoreModules(): Promise<void> {\n        if (this.modules) {\n            if (process.env.NODE_ENV === 'development') {\n                console.warn('Core: Core modules are already created.');\n            }\n            return;\n        }\n\n        const translations = await this.fetchLocaleTranslations();\n\n        this.modules = Object.freeze({\n            risk: new RiskModule(this, { ...this.options, loadingContext: this.loadingContext }),\n            analytics: Analytics({\n                loadingContext: this.loadingContext,\n                analyticsContext: this.analyticsContext,\n                clientKey: this.options.clientKey,\n                locale: this.options.locale,\n                analytics: this.options.analytics,\n                amount: this.options.amount,\n                bundleType: Core.metadata.bundleType\n            }),\n            resources: new Resources(this.cdnImagesUrl),\n            i18n: new Language({\n                locale: this.options.locale,\n                translations,\n                customTranslations: this.options.translations\n            }),\n            srPanel: new SRPanel(this, { ...this.options.srConfig })\n        });\n    }\n}\n\nexport default Core;\n"],"names":["Core","setBundleType","type","metadata","bundleType","register","items","registry","add","getComponent","txVariant","initialize","this","initializeCore","validateCoreConfiguration","createCoreModules","session","setupSession","options","then","sessionResponse","amount","shopperLocale","countryCode","paymentMethods","rest","setOptions","_object_spread_props","_object_spread","order","remainingAmount","locale","createPaymentMethodsList","catch","error","onError","Promise","reject","resolve","fetchLocaleTranslations","getTranslations","cdnTranslationsUrl","version","_this_options_onError","_this_options","_this_options_onError1","_this_options1","AdyenCheckoutError","call","cause","paymentMethodsConfiguration","console","warn","IMPLEMENTATION_ERROR","DEFAULT_LOCALE","formatLocale","translations","formatCustomTranslations","submitDetails","details","promise","onAdditionalDetails","data","undefined","sanitizeResponse","verifyPaymentDidNotFail","afterAdditionalDetails","response","_this_options_onPaymentCompleted","cleanupFinalResult","onPaymentCompleted","e","_this_options_onPaymentFailed","CancelError","onPaymentFailed","createFromAction","action","hasOwnProperty","Error","component","THREEDS2_FULL","subtype","paymentMethodType","event","AnalyticsLogEvent","ANALYTICS_ACTION_STR","subType","message","modules","analytics","sendAnalytics","props","getCorePropsForComponent","getComponentForAction","handleCreateError","processGlobalOptions","globalOptions","core","i18n","loadingContext","cdnContext","cdnImagesUrl","storeElementReference","element","components","push","paymentMethod","paymentMethodName","name","errorMessage","JSON","stringify","paymentMethodsResponse","PaymentMethods","Object","freeze","risk","RiskModule","Analytics","analyticsContext","clientKey","resources","Resources","Language","customTranslations","srPanel","SRPanel","srConfig","constructor","_this_options_clientKey","_define_property","actionEle","update","forEach","newProps","remove","filter","c","_id","unmount","assertConfigurationPropertiesAreValid","bind","defaultProps","apiUrl","analyticsUrl","resolveEnvironments","environment","_environmentUrls","Session","clientKeyType","substring","_this_options__environmentUrls","_this_options_clientKey1","includes","api","debug","exposeLibraryMetadata","window"],"mappings":"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"}