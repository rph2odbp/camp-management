{"version":3,"file":"ApplePayService.js","sources":["../../../../../src/components/ApplePay/services/ApplePayService.ts"],"sourcesContent":["import { ApplePayPaymentAuthorizationResult } from '../types';\n\nexport interface ApplePayServiceOptions {\n    version: number;\n    onValidateMerchant: (resolve, reject, url) => void;\n    onError: (error?: unknown) => void;\n    onCancel?: (event: ApplePayJS.Event) => void;\n    onPaymentMethodSelected?: (resolve, reject, event: ApplePayJS.ApplePayPaymentMethodSelectedEvent) => void;\n    onShippingMethodSelected?: (resolve, reject, event: ApplePayJS.ApplePayShippingMethodSelectedEvent) => void;\n    onShippingContactSelected?: (resolve, reject, event: ApplePayJS.ApplePayShippingContactSelectedEvent) => void;\n    onPaymentAuthorized: (\n        resolve: (result: ApplePayPaymentAuthorizationResult) => void,\n        reject: (result: ApplePayPaymentAuthorizationResult) => void,\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent\n    ) => void;\n}\n\nclass ApplePayService {\n    private session: ApplePaySession;\n    private readonly options: ApplePayServiceOptions;\n\n    constructor(paymentRequest: ApplePayJS.ApplePayPaymentRequest, options: ApplePayServiceOptions) {\n        this.options = options;\n\n        this.session = new ApplePaySession(options.version, paymentRequest);\n        this.session.onvalidatemerchant = event => {\n            void this.onvalidatemerchant(event, options.onValidateMerchant);\n        };\n        this.session.onpaymentauthorized = event => {\n            void this.onpaymentauthorized(event, options.onPaymentAuthorized);\n        };\n\n        this.session.oncancel = event => {\n            this.oncancel(event, options.onCancel);\n        };\n\n        if (typeof options.onPaymentMethodSelected === 'function') {\n            this.session.onpaymentmethodselected = event => {\n                void this.onpaymentmethodselected(event, options.onPaymentMethodSelected);\n            };\n        }\n\n        if (typeof options.onShippingContactSelected === 'function') {\n            this.session.onshippingcontactselected = event => {\n                void this.onshippingcontactselected(event, options.onShippingContactSelected);\n            };\n        }\n\n        if (typeof options.onShippingMethodSelected === 'function') {\n            this.session.onshippingmethodselected = event => {\n                void this.onshippingmethodselected(event, options.onShippingMethodSelected);\n            };\n        }\n    }\n\n    /**\n     * Begins the merchant validation process.\n     * When this method is called, the payment sheet is presented and the merchant validation process is initiated.\n     * @see {@link https://developer.apple.com/documentation/apple_pay_on_the_web/applepaysession/1778001-begin}\n     */\n    begin() {\n        return this.session.begin();\n    }\n\n    /**\n     * An event handler that is called when the payment sheet is displayed.\n     * Use this attribute to request and return a merchant session.\n     * @param event - An ApplePayValidateMerchantEvent object (contains validationURL)\n     * @param onValidateMerchant - A promise implemented by the merchant that will resolve with the merchantSession\n     * @see {@link https://developer.apple.com/documentation/apple_pay_on_the_web/apple_pay_js_api/providing_merchant_validation}\n     */\n    onvalidatemerchant(event: ApplePayJS.ApplePayValidateMerchantEvent, onValidateMerchant) {\n        return new Promise((resolve, reject) => onValidateMerchant(resolve, reject, event.validationURL))\n            .then(response => {\n                this.session.completeMerchantValidation(response);\n            })\n            .catch(error => {\n                console.error(error);\n                this.session.abort();\n                this.options.onError(error);\n            });\n    }\n\n    /**\n     * An event handler that is called when the user has authorized the Apple Pay payment with Touch ID, Face ID, or passcode.\n     * The onpaymentauthorized function must complete the payment and respond by calling completePayment before the 30 second timeout.\n     *\n     * @param event - The event parameter contains the payment (ApplePayPayment) attribute.\n     * @param onPaymentAuthorized - A promise that will complete the payment when resolved. Use this promise to process the payment.\n     * @see {@link https://developer.apple.com/documentation/apple_pay_on_the_web/applepaysession/1778020-onpaymentauthorized}\n     */\n    onpaymentauthorized(\n        event: ApplePayJS.ApplePayPaymentAuthorizedEvent,\n        onPaymentAuthorized: ApplePayServiceOptions['onPaymentAuthorized']\n    ): Promise<void> {\n        return new Promise((resolve, reject) => onPaymentAuthorized(resolve, reject, event))\n            .then((result: ApplePayPaymentAuthorizationResult) => {\n                this.session.completePayment(result);\n            })\n            .catch((result: ApplePayPaymentAuthorizationResult) => {\n                this.session.completePayment(result);\n            });\n    }\n\n    /**\n     * An event handler that is called when a new payment method is selected.\n     * The onpaymentmethodselected function must resolve before the 30 second timeout\n     *\n     * @param event - The event parameter contains the payment (ApplePayPayment) attribute.\n     * @param onPaymentMethodSelected - A promise that will complete the payment when resolved. Use this promise to process the payment.\n     * @see {@link https://developer.apple.com/documentation/apple_pay_on_the_web/applepaysession/1778013-onpaymentmethodselected}\n     */\n    onpaymentmethodselected(event: ApplePayJS.ApplePayPaymentMethodSelectedEvent, onPaymentMethodSelected) {\n        return new Promise((resolve, reject) => onPaymentMethodSelected(resolve, reject, event))\n            .then((paymentMethodUpdate: ApplePayJS.ApplePayPaymentMethodUpdate) => {\n                this.session.completePaymentMethodSelection(paymentMethodUpdate);\n            })\n            .catch((paymentMethodUpdate: ApplePayJS.ApplePayPaymentMethodUpdate) => {\n                this.session.completePaymentMethodSelection(paymentMethodUpdate);\n            });\n    }\n\n    /**\n     * An event handler that is called when a new payment method is selected.\n     * The onpaymentmethodselected function must resolve before the 30 second timeout\n     * @param event - The event parameter contains the shippingContact attribute.\n     * @param onShippingContactSelected - A promise that will complete the selection of a shipping contact with an update.\n     * @see {@link https://developer.apple.com/documentation/apple_pay_on_the_web/applepaysession/1778009-onshippingcontactselected}\n     */\n    onshippingcontactselected(event: ApplePayJS.ApplePayShippingContactSelectedEvent, onShippingContactSelected) {\n        return new Promise((resolve, reject) => onShippingContactSelected(resolve, reject, event))\n            .then((shippingContactUpdate: ApplePayJS.ApplePayShippingContactUpdate) => {\n                this.session.completeShippingContactSelection(shippingContactUpdate);\n            })\n            .catch((shippingContactUpdate: ApplePayJS.ApplePayShippingContactUpdate) => {\n                this.session.completeShippingContactSelection(shippingContactUpdate);\n            });\n    }\n\n    /**\n     * An event handler that is called when a new payment method is selected.\n     * The onpaymentmethodselected function must resolve before the 30 second timeout\n     * @param event - The event parameter contains the shippingMethod attribute.\n     * @param onShippingMethodSelected - A promise that will complete the selection of a shipping method with an update.\n     * @see {@link https://developer.apple.com/documentation/apple_pay_on_the_web/applepaysession/1778009-onshippingcontactselected}\n     */\n    onshippingmethodselected(event: ApplePayJS.ApplePayShippingMethodSelectedEvent, onShippingMethodSelected) {\n        return new Promise((resolve, reject) => onShippingMethodSelected(resolve, reject, event))\n            .then((shippingMethodUpdate: ApplePayJS.ApplePayShippingMethodUpdate) => {\n                this.session.completeShippingMethodSelection(shippingMethodUpdate);\n            })\n            .catch((shippingMethodUpdate: ApplePayJS.ApplePayShippingMethodUpdate) => {\n                this.session.completeShippingMethodSelection(shippingMethodUpdate);\n            });\n    }\n\n    /**\n     * An event handler that is automatically called when the payment UI is dismissed.\n     * This function can be called even after an onpaymentauthorized event has been dispatched.\n     * @param event -\n     * @param onCancel -\n     * @see {@link https://developer.apple.com/documentation/apple_pay_on_the_web/applepaysession/1778029-oncancel}\n     */\n    oncancel(event: ApplePayJS.Event, onCancel): void {\n        onCancel(event);\n    }\n}\n\nexport default ApplePayService;\n"],"names":["ApplePayService","begin","this","session","onvalidatemerchant","event","onValidateMerchant","Promise","resolve","reject","validationURL","then","response","completeMerchantValidation","catch","error","console","abort","options","onError","onpaymentauthorized","onPaymentAuthorized","result","completePayment","onpaymentmethodselected","onPaymentMethodSelected","paymentMethodUpdate","completePaymentMethodSelection","onshippingcontactselected","onShippingContactSelected","shippingContactUpdate","completeShippingContactSelection","onshippingmethodselected","onShippingMethodSelected","shippingMethodUpdate","completeShippingMethodSelection","oncancel","onCancel","constructor","paymentRequest","_define_property","ApplePaySession","version"],"mappings":"wHAiBA,MAAMA,EA2CFC,KAAAA,GACI,OAAOC,KAAKC,QAAQF,OACxB,CASAG,kBAAAA,CAAmBC,EAAiDC,GAChE,OAAO,IAAIC,QAAQ,CAACC,EAASC,IAAWH,EAAmBE,EAASC,EAAQJ,EAAMK,gBAC7EC,KAAKC,IACFV,KAAKC,QAAQU,2BAA2BD,KAE3CE,MAAMC,IACHC,QAAQD,MAAMA,GACdb,KAAKC,QAAQc,QACbf,KAAKgB,QAAQC,QAAQJ,IAEjC,CAUAK,mBAAAA,CACIf,EACAgB,GAEA,OAAO,IAAId,QAAQ,CAACC,EAASC,IAAWY,EAAoBb,EAASC,EAAQJ,IACxEM,KAAMW,IACHpB,KAAKC,QAAQoB,gBAAgBD,KAEhCR,MAAOQ,IACJpB,KAAKC,QAAQoB,gBAAgBD,IAEzC,CAUAE,uBAAAA,CAAwBnB,EAAsDoB,GAC1E,OAAO,IAAIlB,QAAQ,CAACC,EAASC,IAAWgB,EAAwBjB,EAASC,EAAQJ,IAC5EM,KAAMe,IACHxB,KAAKC,QAAQwB,+BAA+BD,KAE/CZ,MAAOY,IACJxB,KAAKC,QAAQwB,+BAA+BD,IAExD,CASAE,yBAAAA,CAA0BvB,EAAwDwB,GAC9E,OAAO,IAAItB,QAAQ,CAACC,EAASC,IAAWoB,EAA0BrB,EAASC,EAAQJ,IAC9EM,KAAMmB,IACH5B,KAAKC,QAAQ4B,iCAAiCD,KAEjDhB,MAAOgB,IACJ5B,KAAKC,QAAQ4B,iCAAiCD,IAE1D,CASAE,wBAAAA,CAAyB3B,EAAuD4B,GAC5E,OAAO,IAAI1B,QAAQ,CAACC,EAASC,IAAWwB,EAAyBzB,EAASC,EAAQJ,IAC7EM,KAAMuB,IACHhC,KAAKC,QAAQgC,gCAAgCD,KAEhDpB,MAAOoB,IACJhC,KAAKC,QAAQgC,gCAAgCD,IAEzD,CASAE,QAAAA,CAAS/B,EAAyBgC,GAC9BA,EAAShC,EACb,CAhJA,WAAAiC,CAAYC,EAAmDrB,GAH/DsB,EAAAtC,KAAQC,eAAR,GACAqC,EAAAtC,KAAiBgB,eAAjB,GAGIhB,KAAKgB,QAAUA,EAEfhB,KAAKC,QAAU,IAAIsC,gBAAgBvB,EAAQwB,QAASH,GACpDrC,KAAKC,QAAQC,mBAAqBC,IACzBH,KAAKE,mBAAmBC,EAAOa,EAAQZ,qBAEhDJ,KAAKC,QAAQiB,oBAAsBf,IAC1BH,KAAKkB,oBAAoBf,EAAOa,EAAQG,sBAGjDnB,KAAKC,QAAQiC,SAAW/B,IACpBH,KAAKkC,SAAS/B,EAAOa,EAAQmB,WAGc,mBAApCnB,EAAQO,0BACfvB,KAAKC,QAAQqB,wBAA0BnB,IAC9BH,KAAKsB,wBAAwBnB,EAAOa,EAAQO,2BAIR,mBAAtCP,EAAQW,4BACf3B,KAAKC,QAAQyB,0BAA4BvB,IAChCH,KAAK0B,0BAA0BvB,EAAOa,EAAQW,6BAIX,mBAArCX,EAAQe,2BACf/B,KAAKC,QAAQ6B,yBAA2B3B,IAC/BH,KAAK8B,yBAAyB3B,EAAOa,EAAQe,2BAG9D"}